$;;=========================================================================
$;; Copyright (C) 2012 The Elastos Open Source Project
$;;
$;; Licensed under the Apache License, Version 2.0 (the "License");
$;; you may not use this file except in compliance with the License.
$;; You may obtain a copy of the License at
$;;
$;;      http://www.apache.org/licenses/LICENSE-2.0
$;;
$;; Unless required by applicable law or agreed to in writing, software
$;; distributed under the License is distributed on an "AS IS" BASIS,
$;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
$;; See the License for the specific language governing permissions and
$;; limitations under the License.
$;;=========================================================================
$
$INPUT class

PInterface _${name}::_AspectProbe(_ELASTOS REIID riid)
{
    if (FALSE == _m_bAggregated) return NULL;

$WITH all interfaces DO
$   IF attrib is not "callback" and attrib is not "clsobj" and attrib is not "filter"
$       IF interface is first
$
    if (EIID_IInterface == riid) {
        return (IInterface *)(${name} *)this;
    }
$       END IF ;; interface is first
$
$       WITH all parents DO
    else if (EIID_${name} == riid) {
        return (${name} *)(${child.name} *)this;
    }
$       END DO ;; all parents
$
    else if (EIID_${name} == riid) {
$ IF interface.attrib is "privileged"
        ECode ec = _Impl_InsideProtectedZone();
        if (FAILED(ec)) return NULL;
$ END IF;;
        return (${name} *)this;
    }
$
$   END IF ;; !callback, !clsobj, !filter
$END DO ;; all interfaces
$
    else if (EIID_GENERIC_INFO == riid) {
${GenericInfoQI(class)}
    }
    else if ((_ELASTOS REIID)ECLSID_${name} == riid) {
        return (IInterface *)(IAspect *)this;
    }
$   IF attrib is "hasparent" and super.type is not "generic"
$     IF super.attrib is "hascallback"
    else if (EIID_SUPER_CALLBACK_CONNECTOR == riid) {
        if(NULL == _m_pSuper) return NULL;
        return _m_pSuper->AspectProbe(
                        EIID_CALLBACK_CONNECTOR);
    }
$     END IF ;; super.attrib is hascallback and not generic
$   END IF

    return NULL;
}

ECode _${name}::_Aggregate(PInterface pOuter)
{
    ECode ec;

    if (NULL != _m_pOuter || NULL == pOuter) return E_CLASS_NO_AGGREGATION;

    _m_syncLock = (Mutex*)pOuter->Probe(EIID_MUTEX_INFO);
    if (!_m_syncLock) return E_NO_INTERFACE;

    ec = ((IObject*)pOuter)->Aggregate(AggrType_AspectAttach, (IInterface *)(IAspect *)this);
    if (FAILED(ec)) return ec;

    _m_pOuter = (IObject*)pOuter;
    _m_bAggregated = TRUE;

    return NOERROR;
}

ECode _${name}::_Unaggregate(ClassID* pTargetClsId)
{
    return NOERROR;
}
