//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

#ifndef __ELASTOS_SQL_SQLITE_JDBC_JDBCSTATEMENT_H__
#define __ELASTOS_SQL_SQLITE_JDBC_JDBCSTATEMENT_H__

#include "Elastos.CoreLibrary.Sql.h"
#include "elastos/core/Object.h"
#include "elastos/utility/etl/List.h"

using Elastos::Core::Object;
using Elastos::Sql::IResultSet;
using Elastos::Sql::ISQLWarning;
using Elastos::Utility::Etl::List;

namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC{

class JDBCStatement
    : public Object
    , public IJDBCStatement
    , public IStatement
    , public IWrapper
{
public:
    CAR_INTERFACE_DECL()

    JDBCStatement();

    JDBCStatement(
        /* [in] */ IJDBCConnection* conn);

    virtual CARAPI AddBatch(
        /* [in] */ const String& sql);

    virtual CARAPI Cancel();

    virtual CARAPI ClearBatch();

    virtual CARAPI ClearWarnings();

    virtual CARAPI Close();

    virtual CARAPI Execute(
        /* [in] */ const String& sql,
        /* [out] */ Boolean* value);

    virtual CARAPI Execute(
        /* [in] */ const String& sql,
        /* [in] */ Int32 autoGeneratedKeys,
        /* [out] */ Boolean* value);

    virtual CARAPI Execute(
        /* [in] */ const String& sql,
        /* [in] */ ArrayOf<Int32> * columnIndexes,
        /* [out] */ Boolean* value);

    virtual CARAPI Execute(
        /* [in] */ const String& sql,
        /* [in] */ ArrayOf<String> * columnNames,
        /* [out] */ Boolean* value);

    virtual CARAPI ExecuteBatch(
        /* [out, callee] */ ArrayOf<Int32> ** value);

    virtual CARAPI ExecuteQuery(
        /* [in] */ const String& sql,
        /* [out] */ IResultSet** resultset);

    virtual CARAPI ExecuteUpdate(
        /* [in] */ const String& sql,
        /* [out] */ Int32* value);

    virtual CARAPI ExecuteUpdate(
        /* [in] */ const String& sql,
        /* [in] */ Int32 autoGeneratedKeys,
        /* [out] */ Int32* value);

    virtual CARAPI ExecuteUpdate(
        /* [in] */ const String& sql,
        /* [in] */ ArrayOf<Int32> * columnIndexes,
        /* [out] */ Int32* value);

    virtual CARAPI ExecuteUpdate(
        /* [in] */ const String& sql,
        /* [in] */ ArrayOf<String> * columnNames,
        /* [out] */ Int32* value);

    virtual CARAPI GetConnection(
        /* [out] */ IConnection ** conn);

    virtual CARAPI GetFetchDirection(
        /* [out] */ Int32* value);

    virtual CARAPI GetFetchSize(
        /* [out] */ Int32* value);

    virtual CARAPI GetGeneratedKeys(
        /* [out] */ IResultSet** value);

    virtual CARAPI GetMaxFieldSize(
        /* [out] */ Int32* value);

    virtual CARAPI GetMaxRows(
        /* [out] */ Int32* value);

    virtual CARAPI GetMoreResults(
        /* [out] */ Boolean* value);

    virtual CARAPI GetMoreResults(
        /* [in] */ Int32 current,
        /* [out] */ Boolean* value);

    virtual CARAPI GetQueryTimeout(
        /* [out] */ Int32* value);

    virtual CARAPI GetResultSet(
        /* [out] */ IResultSet** value);

    virtual CARAPI GetResultSetConcurrency(
        /* [out] */ Int32* value);

    virtual CARAPI GetResultSetHoldability(
        /* [out] */ Int32* value);

    virtual CARAPI GetResultSetType(
        /* [out] */ Int32* value);

    virtual CARAPI GetUpdateCount(
        /* [out] */ Int32* value);

    virtual CARAPI GetWarnings(
        /* [out] */ ISQLWarning** value);

    virtual CARAPI SetCursorName(
        /* [in] */ const String& name);

    virtual CARAPI SetEscapeProcessing(
        /* [in] */ Boolean isable);

    virtual CARAPI SetFetchDirection(
        /* [in] */ Int32 direction);

    virtual CARAPI SetFetchSize(
        /* [in] */ Int32 fetchSize);

    virtual CARAPI SetMaxFieldSize(
        /* [in] */ Int32 max);

    virtual CARAPI SetMaxRows(
        /* [in] */ Int32 max);

    virtual CARAPI SetQueryTimeout(
        /* [in] */ Int32 seconds);

    virtual CARAPI IsClosed(
        /* [out] */ Boolean * value);

    virtual CARAPI SetPoolable(
        /* [in] */ Boolean poolable);

    virtual CARAPI IsPoolable(
        /* [out] */ Boolean* value);

    virtual CARAPI ExecuteQuery(
        /* [in] */ const String& sql,
        /* [in] */ ArrayOf<String> * args,
        /* [in] */ Boolean updonly,
        /* [out] */ IResultSet** resultset);

    virtual CARAPI Unwrap(
        /* [in] */ PInterface iface,
        /* [out] */ IInterface ** oface);

    virtual CARAPI IsWrapperFor(
        /* [in] */ IInterface* iface,
        /* [out] */ Boolean* value);

    CARAPI constructor(
        /* [in] */ IJDBCConnection* iconn);

public:
    AutoPtr<IJDBCConnection> conn;
    AutoPtr<IJDBCResultSet> rs;
    Int32 updcnt;
    Int32 maxrows;

private:
    List<String> batch;
};

} // namespace JDBC
} // namespace SQLite
} // namespace Sql
} // namespace Elastos

#endif // __ELASTOS_SQL_SQLITE_JDBC_JDBCSTATEMENT_H__
