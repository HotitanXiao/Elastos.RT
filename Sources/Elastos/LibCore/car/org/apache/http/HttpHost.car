//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{

    namespace Org {
    namespace Apache {
    namespace Http {

    /**
     * Holds all of the variables needed to describe an HTTP connection to a host.
     * This includes remote host name, port and scheme.
     *
     * @author <a href="mailto:becke@u.washington.edu">Michael Becke</a>
     * @author <a href="mailto:mbowler@GargoyleSoftware.com">Mike Bowler</a>
     * @author <a href="mailto:oleg at ural.ru">Oleg Kalnichevski</a>
     * @author Laura Werner
     *
     * @since 4.0
     */
    interface IHttpHost {

        /** The default scheme is "http". */
        // public static final String DEFAULT_SCHEME_NAME = "http";
        const String DEFAULT_SCHEME_NAME = "http";

        /**
         * Returns the host name.
         *
         * @return the host name (IP or DNS name)
         */
        GetHostName(
            [out] String* hostName);

        /**
         * Returns the port.
         *
         * @return the host port, or <code>-1</code> if not set
         */
        GetPort(
            [out] Int32* port);

        /**
         * Returns the scheme name.
         *
         * @return the scheme name
         */
        GetSchemeName(
            [out] String* schemeName);

        /**
         * Return the host URI, as a string.
         *
         * @return the host URI
         */
        ToURI(
            [out] String* URI);

        /**
         * Obtains the host string, without scheme prefix.
         *
         * @return  the host string, for example <code>localhost:8080</code>
         */
        ToHostString(
            [out] String* hostString);

    }

    } // namespace Http
    } // namespace Apache
    } // namespace Org

}
