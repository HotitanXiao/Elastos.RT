//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{

    using interface Elastos.Net.ISocket;

    namespace Org {
    namespace Apache {
    namespace Http {
    namespace Conn {
    namespace Scheme {

    /**
     * A {@link SocketFactory SocketFactory} for layered sockets (SSL/TLS).
     * See there for things to consider when implementing a socket factory.
     *
     * @author Michael Becke
     * @author <a href="mailto:mbowler@GargoyleSoftware.com">Mike Bowler</a>
     * @since 4.0
     */
    /**
     * @Involve
     * interface ISocketFactory;
     */
    interface ILayeredSocketFactory {

        /**
         * Returns a socket connected to the given host that is layered over an
         * existing socket.  Used primarily for creating secure sockets through
         * proxies.
         *
         * @param socket the existing socket
         * @param host the host name/IP
         * @param port the port on the host
         * @param autoClose a flag for closing the underling socket when the created
         * socket is closed
         *
         * @return Socket a new socket
         *
         * @throws IOException if an I/O error occurs while creating the socket
         * @throws UnknownHostException if the IP address of the host cannot be
         * determined
         */
        CreateSocket(
            [in] ISocket* sock,
            [in] String host,
            [in] Int32 port,
            [in] Boolean autoClose,
            [out] ISocket** socket);

    }

    } // namespace Scheme
    } // namespace Conn
    } // namespace Http
    } // namespace Apache
    } // namespace Org

}
