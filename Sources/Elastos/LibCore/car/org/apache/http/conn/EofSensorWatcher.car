//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{

    using interface Elastos.IO.IInputStream;

    namespace Org {
    namespace Apache {
    namespace Http {
    namespace Conn {

    /**
     * A watcher for {@link EofSensorInputStream EofSensorInputStream}.
     * Each stream will notify it's watcher at most once.
     *
     * @author <a href="mailto:rolandw at apache.org">Roland Weber</a>
     *
     *
     * <!-- empty lines to avoid svn diff problems -->
     * @version $Revision: 552264 $
     *
     * @since 4.0
     */
    interface IEofSensorWatcher {

        /**
         * Indicates that EOF is detected.
         *
         * @param wrapped   the underlying stream which has reached EOF
         *
         * @return  <code>true</code> if <code>wrapped</code> should be closed,
         *          <code>false</code> if it should be left alone
         *
         * @throws IOException
         *         in case of an IO problem, for example if the watcher itself
         *         closes the underlying stream. The caller will leave the
         *         wrapped stream alone, as if <code>false</code> was returned.
         */
        EofDetected(
            [in] IInputStream* wrapped,
            [out] Boolean* result);

        /**
         * Indicates that the {@link EofSensorInputStream stream} is closed.
         * This method will be called only if EOF was <i>not</i> detected
         * before closing. Otherwise, {@link #eofDetected eofDetected} is called.
         *
         * @param wrapped   the underlying stream which has not reached EOF
         *
         * @return  <code>true</code> if <code>wrapped</code> should be closed,
         *          <code>false</code> if it should be left alone
         *
         * @throws IOException
         *         in case of an IO problem, for example if the watcher itself
         *         closes the underlying stream. The caller will leave the
         *         wrapped stream alone, as if <code>false</code> was returned.
         */
        StreamClosed(
            [in] IInputStream* wrapped,
            [out] Boolean* result);

        /**
         * Indicates that the {@link EofSensorInputStream stream} is aborted.
         * This method will be called only if EOF was <i>not</i> detected
         * before aborting. Otherwise, {@link #eofDetected eofDetected} is called.
         * <p/>
         * This method will also be invoked when an input operation causes an
         * IOException to be thrown to make sure the input stream gets shut down.
         *
         * @param wrapped   the underlying stream which has not reached EOF
         *
         * @return  <code>true</code> if <code>wrapped</code> should be closed,
         *          <code>false</code> if it should be left alone
         *
         * @throws IOException
         *         in case of an IO problem, for example if the watcher itself
         *         closes the underlying stream. The caller will leave the
         *         wrapped stream alone, as if <code>false</code> was returned.
         */
        StreamAbort(
            [in] IInputStream* wrapped,
            [out] Boolean* result);

    }

    } // namespace Conn
    } // namespace Http
    } // namespace Apache
    } // namespace Org

}
