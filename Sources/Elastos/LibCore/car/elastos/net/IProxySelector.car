//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Utility.IList;
    interface Elastos.Net.IURI;
    interface Elastos.Net.ISocketAddress;

    namespace Elastos {
    namespace Net {

    /**
     * Selects the proxy server to use, if any, when connecting to a given URL.
     */

    interface IProxySelector {
        /**
         * Returns the proxy servers to use on connections to {uri}. This list
         * will contain Proxy#NO_PROXY if no proxy server should be used.
         *
         * @sa Proxy#NO_PROXY
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IllegalArgumentException | if {uri} is null.
         */
        Select(
            [in] IURI* uri,
            [out] IList** container);

        /**
         * Notifies this {ProxySelector} that a connection to the proxy server
         * could not be established.
         *
         * @param uri the URI to which the connection could not be established.
         * @param address the address of the proxy.
         * @param failure the exception which was thrown during connection
         *     establishment.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IllegalArgumentException | if any argument is null.
         */
        ConnectFailed(
            [in] IURI* uri,
            [in] ISocketAddress* address,
            [in] ECode failure);
    }

    interface IProxySelectorHelper {
        /**
         * Returns the default proxy selector, or null if none exists.
         */
        GetDefault(
            [out] IProxySelector** selector);

        /**
         * Sets the default proxy selector. If {selector} is null, the current
         * proxy selector will be removed.
         */
        SetDefault(
            [in] IProxySelector* selector);
    }

    } // namespace Net
    } // namespace Elastos
}