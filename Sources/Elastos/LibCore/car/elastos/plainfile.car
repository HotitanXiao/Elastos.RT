//=========================================================================
// Copyright (C) 2018 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    //======================================================
    // Elastos.IO.IPlainFile
    //======================================================

    namespace Elastos {
    namespace IO {

    /**
     *
     * A plain file interface.
     *
     * At Android, you must add the permission: android.permission.WRITE_EXTERNAL_STORAGE
     *
     */
    interface IPlainFile {
        /**
        *
        * Check wether the file exists.
        *
        * @param
        *      exists [out] the result of the check
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        Exists(
            [out] Boolean* exists);

        /**
        *
        * Check wether the file is a directory.
        *
        * @param
        *      isDir [out] the result of the check
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        IsDir(
            [out] Boolean* isDir);

        /**
        *
        * Check wether the file is a real file.
        *
        * @param
        *      isFile [out] the result of the check
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        IsFile(
            [out] Boolean* isFile);

        /**
        *
        * Delete the file whether it's a real file or a directory.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        Delete();

        /**
        *
        * Creates the directory named by this file, assuming its parents exist.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        Mkdir();

        /**
        *
        * Creates the directory named by this file, creating missing parent directories if necessary.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        Mkdirs();

        /**
        *
        * Write the content to the file using the append mode("a+").
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        Write(
            [in] String content);

        /**
        *
        * Read a file's content. At this version, it's need the max size?
        *
        * @param
        *      content [out] the content what has been read.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        Read(
            [out] String* content);

        /**
        *
        * Returns the path of this file.
        *
        * @param
        *      path [out] the path of a real file or a directory.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        GetPath(
            [out] String* path);
    }

    /**
     *
     * An representation of a file system identified by a pathname.
     * The pathname must be absolute (relative to the root directory of the file system)
     *
     * The actual file referenced by a CPlainFile may or may not exist. It may
     * also, despite the name CPlainFile, be a directory or other regular file.
     *
     * This car class implements the interface: IPlainFile
     *
     */
    class CPlainFile {
        /**
        *
        * The constructor will construct a directory using the path which must be a absolute path.
        * This method will be invoked in the background after the c++ class' constructor.
        *
        * @param
        *      dir [in] the directory's path.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        constructor(
            [in] String dir);

        /**
        *
        * the constructor to construct a file using the path which must be a absolute path.
        * This method will be invoked in the background after the c++ class' constructor.
        *
        * @param
        *      dir [in] the directory of the file.
        *
        * @param
        *      name [in] the file's name. If the name is NULL, The file created by CPlainFile will be a directory actully.
        *
        * @return
        *      Returns NOERROR if there is no exception, otherwise it returns the corresponding error code.
        */
        constructor(
            [in] String dir,
            [in] String name);

        interface IPlainFile;
    }

    } // namespace IO
    } // namespace Elastos
}
