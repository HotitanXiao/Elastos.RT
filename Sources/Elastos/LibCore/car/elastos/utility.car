//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    //======================================================
    // Elastos.Utility
    //======================================================
    merge("utility/Exceptions.car");
//    merge("utility/IBitSet.car");
    merge("utility/IDate.car");
//    merge("utility/ICalendar.car");
    merge("utility/IIterable.car");
    merge("utility/ICollection.car");
    merge("utility/IList.car");
    merge("utility/ILocale.car");
    merge("utility/IMap.car");
    merge("utility/IHashMap.car");
    merge("utility/IHashSet.car");
    merge("utility/IEnumeration.car");
    merge("utility/IHashTable.car");
    merge("utility/IIdentityHashMap.car");
    merge("utility/ILinkedHashMap.car");
    merge("utility/ILinkedHashSet.car");
    merge("utility/ILinkedList.car");
    merge("utility/IDictionary.car");
//    merge("utility/IProperties.car");
    merge("utility/IGregorianCalendar.car");
    merge("utility/IIterator.car");
    merge("utility/IListIterator.car");
    merge("utility/IQueue.car");
    merge("utility/IDeque.car");
    merge("utility/IWeakHashMap.car");
    merge("utility/ITreeMap.car");
    merge("utility/ITreeSet.car");
    merge("utility/IRandomAccess.car");
//    merge("utility/ITimeZone.car");
//    merge("utility/ISimpleTimeZone.car");
//    merge("utility/ITimerTask.car");
//    merge("utility/ITimer.car");
    merge("utility/ICurrency.car");
    merge("utility/IUUID.car");
//    merge("utility/ITimeZoneGetter.car");
    merge("utility/IArrayList.car");
    merge("utility/IFormattableFlags.car");
    merge("utility/IFormatter.car");
    merge("utility/IFormattable.car");
    merge("utility/IArrayDeque.car");
    merge("utility/IEventListener.car");
    merge("utility/IEventListenerProxy.car");
    merge("utility/IEventObject.car");
//    merge("utility/IResourceBundle.car");
//    merge("utility/IListResourceBundle.car");
    merge("utility/ISortedMap.car");
    merge("utility/INavigableMap.car");
    merge("utility/ISet.car");
    merge("utility/ISortedSet.car");
    merge("utility/INavigableSet.car");
    merge("utility/IObserver.car");
    merge("utility/IObservable.car");
    merge("utility/IPriorityQueue.car");
    merge("utility/IEnumSet.car");
    merge("utility/IHugeEnumSet.car");
    merge("utility/IMiniEnumSet.car");
//    merge("utility/IPropertyResourceBundle.car");
//    merge("utility/IScanner.car");
    merge("utility/IServiceLoader.car");
    merge("utility/IVector.car");
    merge("utility/IStack.car");
    merge("utility/IStringTokenizer.car");
    merge("utility/IUnsafeArrayList.car");
    merge("utility/IPropertyPermission.car");
    merge("utility/ICollections.car");
    merge("utility/IEnumMap.car");

    interface Elastos.Core.IAppendable;
    interface Elastos.Core.IComparable;
    interface Elastos.Core.ICloneable;
    interface Elastos.Core.IComparator;

/*
    interface Elastos.IO.ISerializable;
    interface Elastos.IO.IInputStream;
    interface Elastos.IO.IOutputStream;
    interface Elastos.IO.ICloseable;
    interface Elastos.IO.IReader;
    interface Elastos.IO.IReadable;
    interface Elastos.IO.IPrintStream;
    interface Elastos.IO.IFlushable;
    interface Elastos.IO.IFile;
    interface Elastos.IO.Channels.IReadableByteChannel;
*/

    namespace Elastos {
    namespace Utility {

/*
    class CRandom {
        constructor();

        constructor(
            [in] Int64 seed);

        interface IRandom;
        //interface ISerializable;
    }
*/
    class CStringTokenizer {
        /**
         * Constructs a new {@code StringTokenizer} for the parameter string using
         * whitespace as the delimiter. The {@code returnDelimiters} flag is set to
         * {@code false}.
         *
         * @param string
         *            the string to be tokenized.
         */
        constructor(
            [in] String string);

        /**
         * Constructs a new {@code StringTokenizer} for the parameter string using
         * the specified delimiters. The {@code returnDelimiters} flag is set to
         * {@code false}. If {@code delimiters} is {@code null}, this constructor
         * doesn't throw an {@code Exception}, but later calls to some methods might
         * throw a {@code NullPointerException}.
         *
         * @param string
         *            the string to be tokenized.
         * @param delimiters
         *            the delimiters to use.
         */
        constructor(
            [in] String string,
            [in] String delimiters);

        /**
         * Constructs a new {@code StringTokenizer} for the parameter string using
         * the specified delimiters, returning the delimiters as tokens if the
         * parameter {@code returnDelimiters} is {@code true}. If {@code delimiters}
         * is null this constructor doesn't throw an {@code Exception}, but later
         * calls to some methods might throw a {@code NullPointerException}.
         *
         * @param string
         *            the string to be tokenized.
         * @param delimiters
         *            the delimiters to use.
         * @param returnDelimiters
         *            {@code true} to return each delimiter as a token.
         */
        constructor(
            [in] String string,
            [in] String delimiters,
            [in] Boolean returnDelimiters);

        interface IStringTokenizer;
        interface IEnumeration;
    }

    class CArrayDeque {
        constructor();

        constructor(
            [in] Int32 numElements);

        constructor(
            [in] ICollection* c);

        interface IArrayDeque;
        interface ICollection;
        interface IIterable;
        interface IDeque;
        interface ICloneable;
        //interface ISerializable;
    }

    class CArrayList {
        constructor();

        constructor(
            [in] Int32 capacity);

        constructor(
            [in] ICollection* c);

        interface IArrayList;
        interface IList;
        interface ICollection;
        interface IIterable;
        interface ICloneable;
        //interface ISerializable;
        interface IRandomAccess;
    }

    class CArrayListIterator {
        constructor(
            [in] IArrayList* list);

        interface IIterator;
    }

    class CSimpleListIterator {
        constructor(
            [in] IList* list);

        interface IIterator;
    }

    class CFullListIterator {
        constructor(
            [in] IList* list,
            [in] Int32 start);

        interface IIterator;
        interface IListIterator;
    }

    class CSubAbstractListIterator {
        constructor(
            [in] IList* list,
            [in] IListIterator* it,
            [in] Int32 offset,
            [in] Int32 length);

        interface IIterator;
        interface IListIterator;
    }

    class CSubAbstractList {
        constructor(
            [in] IList* list,
            [in] Int32 start,
            [in] Int32 end);

        interface IList;
        interface ICollection;
        interface IIterable;
    }

    class CRandomAccessSubList {
        constructor(
            [in] IList* list,
            [in] Int32 start,
            [in] Int32 end);

        interface IRandomAccess;
        interface IList;
        interface ICollection;
        interface IIterable;
    }

    [deprecated]
/*
    class CBitSet {
        constructor();

        constructor(
            [in] Int32 bitCount);

        constructor(
            [in] ArrayOf<Int64>* array);

        interface IBitSet;
        //interface ISerializable;
        interface ICloneable;
    }

    singleton class CBitSetHelper {
        interface IBitSetHelper;
    }
*/
    class CEnumMap {
        constructor();

        constructor(
            [in] InterfaceID keyType);

        constructor(
            [in] IEnumMap* enummap);

        constructor(
            [in] IMap* map);

        interface IEnumMap;
        //interface ISerializable;
        interface ICloneable;
        interface IMap;
    }

    class CHashMap {
        constructor();

        constructor(
            [in] Int32 capacity);

        constructor(
            [in] Int32 capacity,
            [in] Float loadFactor);

        constructor(
            [in] IMap* map);

        interface IHashMap;
        interface IMap;
        interface ICloneable;
        //interface ISerializable;
    }

    class CHashSet {
        constructor();

        constructor(
            [in] Int32 capacity);

        constructor(
            [in] Int32 capacity,
            [in] Float loadFactor);

        constructor(
            [in] ICollection* collection);

        constructor(
            [in] IMap* backingMap);

        interface IHashSet;
        interface ISet;
        interface ICollection;
        interface IIterable;
        interface ICloneable;
        //interface ISerializable;
    }

    class CHashTable {
        constructor();

        constructor(
            [in] Int32 capacity);

        constructor(
            [in] Int32 capacity,
            [in] Float loadFactor);

        constructor(
            [in] IMap* backingMap);

        interface IHashTable;
        interface IDictionary;
        interface IMap;
        interface ICloneable;
        //interface ISerializable;
    }

/*    class CIdentityHashMap {
        constructor();

        constructor(
            [in] Int32 maxSize);

        constructor(
            [in] IMap* Map);

        interface IIdentityHashMap;
        interface IMap;
        //interface ISerializable;
        interface ICloneable;
    }
*/

    class CLinkedHashMap {
        constructor();

        constructor(
            [in] Int32 capacity);

        constructor(
            [in] Int32 capacity,
            [in] Float loadFactor);

        constructor(
            [in] Int32 capacity,
            [in] Float loadFactor,
            [in] Boolean accessOrder);

        constructor(
            [in] IMap* Map);

        interface ILinkedHashMap;
        interface IHashMap;
        interface IMap;
        //interface ISerializable;
        interface ICloneable;
    }

    class CLinkedHashSet {
        constructor();

        constructor(
            [in] Int32 capacity);

        constructor(
            [in] Int32 capacity,
            [in] Float loadFactor);

        constructor(
            [in] ICollection* collection);

        interface ILinkedHashSet;
        interface IHashSet;
        interface ISet;
        interface ICollection;
        //interface ISerializable;
        interface ICloneable;
    }

    class CLinkedList {
        constructor();

        constructor(
            [in] ICollection* collection);

        interface ILinkedList;
        interface IList;
        interface ICollection;
        interface IIterable;
        interface IDeque;
        interface IQueue;
        interface ICloneable;
        //interface ISerializable;
    }

    class CVector {
        constructor();

        constructor(
            [in] Int32 capacity);

        constructor(
            [in] Int32 capacity,
            [in] Int32 capacityIncrement);

        constructor(
            [in] ICollection* collection);

        interface IVector;
        interface ICollection;
        interface IIterable;
        interface IList;
        interface IRandomAccess;
        interface ICloneable;
        //interface ISerializable;
    }

    class CStack {
        constructor();

        interface IStack;
        interface IVector;
        interface ICollection;
        interface IIterable;
        interface IList;
        interface IRandomAccess;
        interface ICloneable;
        //interface ISerializable;
    }

    class CWeakHashMap {
        constructor();

        constructor(
            [in] Int32 capacity);

        constructor(
            [in] Int32 capacity,
            [in] Float loadFactor);

        constructor(
            [in] IMap* map);

        interface IWeakHashMap;
        interface IMap;
    }

    class CTreeMap {
        constructor();

        constructor(
            [in] IMap* copyFrommap);

        constructor(
            [in] IComparator* comparator);

        constructor(
            [in] ISortedMap* copyFrom);

        interface ITreeMap;
        interface IMap;
        interface ISortedMap;
        interface INavigableMap;
        interface ICloneable;
        //interface ISerializable;
    }

    class CTreeSet {
        constructor();

        constructor(
            [in] INavigableMap* navmap);

        constructor(
            [in] ICollection* map);

        constructor(
            [in] IComparator* comparator);

        constructor(
            [in] ISortedSet* set);

        interface ITreeSet;
        interface ISet;
        interface ICollection;
        interface IIterable;
        interface INavigableSet;
        interface ISortedSet;
        interface ICloneable;
        //interface ISerializable;
    }

    class CPriorityQueue {
        constructor();

        constructor(
            [in] Int32 initialCapacity);

        constructor(
            [in] Int32 initialCapacity,
            [in] IComparator* comparator);

        constructor(
            [in] ICollection* co);

        constructor(
            [in] IPriorityQueue* queue);

        constructor(
            [in] ISortedSet* set);

        interface IPriorityQueue;
        interface ICollection;
        interface IIterable;
        interface IQueue;
        //interface ISerializable;
    }

    [deprecated]
    class CHugeEnumSet {
        constructor();

        constructor(
            [in] InterfaceID cls,
            [in] ArrayOf<IInterface *> * enums);

        interface IHugeEnumSet;
        interface ICollection;
        interface IIterable;
        interface ISet;
        interface ICloneable;
        //interface ISerializable;
    }

    [deprecated]
    class CMiniEnumSet {
        constructor();

        constructor(
            [in] InterfaceID cls,
            [in] ArrayOf<IInterface *> * enums);

        interface IMiniEnumSet;
        interface ICollection;
        interface IIterable;
        interface ISet;
        interface ICloneable;
        //interface ISerializable;
    }

    class CUnsafeArrayList {
        constructor();

        constructor(
            [in] InterfaceID elementType,
            [in] Int32 initialCapacity);

        interface IUnsafeArrayList;
        interface ICollection;
        interface IIterable;
        interface IList;
    }

    singleton class CCollections {
        interface ICollections;
    }

    singleton class CEnumSetHelper {
        interface IEnumSetHelper;
    }

/*    singleton class CCalendarHelper {
        interface ICalendarHelper;
    }
*/
/*
    singleton class CCurrencyHelper {
        interface ICurrencyHelper;
    }
*/
/*
    singleton class CDateHelper {
        interface IDateHelper;
    }
*/
//    class CGregorianCalendar {
//        /**
//         * Constructs a new {@code GregorianCalendar} initialized to the current date and
//         * time with the default {@code Locale} and {@code TimeZone}.
//         */
//        constructor();
//
//        /**
//         * Constructs a new {@code GregorianCalendar} initialized to midnight in the default
//         * {@code TimeZone} and {@code Locale} on the specified date.
//         *
//         * @param year
//         *            the year.
//         * @param month
//         *            the month.
//         * @param day
//         *            the day of the month.
//         */
//        constructor(
//            [in] Int32 year,
//            [in] Int32 month,
//            [in] Int32 day);
//
//        /**
//         * Constructs a new {@code GregorianCalendar} initialized to the specified date and
//         * time in the default {@code TimeZone} and {@code Locale}.
//         *
//         * @param year
//         *            the year.
//         * @param month
//         *            the month.
//         * @param day
//         *            the day of the month.
//         * @param hour
//         *            the hour.
//         * @param minute
//         *            the minute.
//         */
//        constructor(
//            [in] Int32 year,
//            [in] Int32 month,
//            [in] Int32 day,
//            [in] Int32 hour,
//            [in] Int32 minute);
//
//        /**
//         * Constructs a new {@code GregorianCalendar} initialized to the specified date and
//         * time in the default {@code TimeZone} and {@code Locale}.
//         *
//         * @param year
//         *            the year.
//         * @param month
//         *            the month.
//         * @param day
//         *            the day of the month.
//         * @param hour
//         *            the hour.
//         * @param minute
//         *            the minute.
//         * @param second
//         *            the second.
//         */
//        constructor(
//            [in] Int32 year,
//            [in] Int32 month,
//            [in] Int32 day,
//            [in] Int32 hour,
//            [in] Int32 minute,
//            [in] Int32 second);
//
//        constructor(
//            [in] Int64 milliseconds);
//
//        /**
//         * Constructs a new {@code GregorianCalendar} initialized to the current date and
//         * time and using the specified {@code Locale} and the default {@code TimeZone}.
//         *
//         * @param locale
//         *            the {@code Locale}.
//         */
//        constructor(
//            [in] ILocale* locale);
//
//        /**
//         * Constructs a new {@code GregorianCalendar} initialized to the current date and
//         * time and using the specified {@code TimeZone} and the default {@code Locale}.
//         *
//         * @param timezone
//         *            the {@code TimeZone}.
//         */
//        constructor(
//            [in] ITimeZone* timeZone);
//
//        /**
//         * Constructs a new {@code GregorianCalendar} initialized to the current date and
//         * time and using the specified {@code TimeZone} and {@code Locale}.
//         *
//         * @param timezone
//         *            the {@code TimeZone}.
//         * @param locale
//         *            the {@code Locale}.
//         */
//        constructor(
//            [in] ITimeZone* timeZone,
//            [in] ILocale* locale);
//
//        constructor(
//            [in] Boolean ignored);
//
//        interface IGregorianCalendar;
//        interface ICalendar;
//        //interface ISerializable;
//        interface ICloneable;
//        interface IComparable;
//    }
//
//    class CTimer {
//        constructor(
//            [in] String name,
//            [in] Boolean isDaemon);
//
//        constructor(
//            [in] String name);
//
//        constructor(
//            [in] Boolean isDaemon);
//
//        constructor();
//
//        interface ITimer;
//    }
//
//    class CUUID {
//        /**
//         * <p>
//         * Constructs an instance with the specified bits.
//         *
//         * @param mostSigBits
//         *            The 64 most significant bits of the UUID.
//         * @param leastSigBits
//         *            The 64 least significant bits of the UUID.
//         */
//        constructor(
//            [in] Int64 mostSigBits,
//            [in] Int64 leastSigBits);
//
//        interface IUUID;
//        interface IComparable;
//        //interface ISerializable;
//    }
//
//    singleton class CUUIDHelper {
//        interface IUUIDHelper;
//    }
//
//    singleton class CTimeZoneHelper {
//        interface ITimeZoneHelper;
//    }
//
//    class CLocale {
//        /**
//         * There's a circular dependency between toLowerCase/toUpperCase and
//         * Locale.US. Work around this by avoiding these methods when constructing
//         * the built-in locales.
//         *
//         * @param unused required for this constructor to have a unique signature
//         */
//        constructor(
//            [in] Boolean unused,
//            [in] String lowerCaseLanguageCode,
//            [in] String upperCaseCountryCode);
//
//        /**
//         * Constructs a new {@code Locale} using the specified language.
//         */
//        constructor(
//            [in] String language);
//
//        /**
//         * Constructs a new {@code Locale} using the specified language and country codes.
//         */
//        constructor(
//           [in] String language,
//           [in] String country);
//
//        /**
//         * Constructs a new {@code Locale} using the specified language, country,
//         * and variant codes.
//         */
//        constructor(
//            [in] String language,
//            [in] String country,
//            [in] String variant);
//
//        constructor(
//            [in] String language,
//            [in] String country,
//            [in] String variant,
//            [in] String scriptCode,
//            [in] ISet* unicodeAttributes,
//            [in] IMap* unicodeKeywords,
//            [in] IMap* extensions,
//            [in] Boolean hasValidatedFields);
//
//        interface ILocale;
//        interface ICloneable;
//        //interface ISerializable;
//    }
//
//    singleton class CLocaleHelper {
//        interface ILocaleHelper;
//    }
//
//    class CLocaleBuilder {
//        constructor();
//
//        interface ILocaleBuilder;
//    }
//
//    class CDate {
//
//        constructor();
//
//        //@Deprecated
//        constructor(
//            [in] Int32 year,
//            [in] Int32 month,
//            [in] Int32 day);
//
//        //@Deprecated
//        constructor(
//            [in] Int32 year,
//            [in] Int32 month,
//            [in] Int32 day,
//            [in] Int32 hour,
//            [in] Int32 minute);
//
//        //@Deprecated
//        constructor(
//            [in] Int32 year,
//            [in] Int32 month,
//            [in] Int32 day,
//            [in] Int32 hour,
//            [in] Int32 minute,
//            [in] Int32 second);
//
//        constructor(
//            [in] Int64 milliseconds);
//
//        //@Deprecated
//        constructor(
//            [in] String string);
//
//        interface IDate;
//        //interface ISerializable;
//        interface ICloneable;
//        interface IComparable;
//    }

    } // namespace Utility
    } // namespace Elastos

}
