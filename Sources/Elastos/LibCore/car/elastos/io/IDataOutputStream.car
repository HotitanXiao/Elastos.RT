//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    namespace Elastos {
    namespace IO {

    /**
     * Wraps an existing {@link OutputStream} and writes big-endian typed data to it.
     * Typically, this stream can be read in by DataInputStream. Types that can be
     * written include byte, 16-bit short, 32-bit int, 32-bit float, 64-bit long,
     * 64-bit double, byte strings, and {@link DataInput MUTF-8} encoded strings.
     *
     * @see DataInputStream
     */
    /**
     * @Involved
     * interface ICloseable;
     * interface IFlushable;
     * interface IOutputStream;
     * interface IFilterOutputStream;
     */
    [deprecated]
    interface IDataOutputStream {
        /**
         * Returns the total number of bytes written to the target stream so far.
         *
         * @return the number of bytes written to the target stream.
         */
        GetSize(
            [out] Int32* result);

        /**
         * Writes a boolean to the target stream.
         *
         * @param val
         *            the boolean value to write to the target stream.
         * @throws IOException
         *             if an error occurs while writing to the target stream.
         * @see DataInputStream#readBoolean()
         */
        WriteBoolean(
            [in] Boolean val);

        /**
         * Writes an 8-bit byte to the target stream. Only the least significant
         * byte of the integer {@code val} is written.
         *
         * @param val
         *            the byte value to write to the target stream.
         * @throws IOException
         *             if an error occurs while writing to the target stream.
         * @see DataInputStream#readByte()
         * @see DataInputStream#readUnsignedByte()
         */
        WriteByte(
            [in] Int32 val);

        /**
         * Writes the low order bytes from a string to the target stream.
         *
         * @param str
         *            the string containing the bytes to write to the target stream.
         * @throws IOException
         *             if an error occurs while writing to the target stream.
         * @see DataInputStream#readFully(byte[])
         * @see DataInputStream#readFully(byte[],int,int)
         */
        WriteBytes(
            [in] ArrayOf<Byte>* buffer);

        WriteBytes(
            [in] String str);

        WriteChar(
            [in] Int32 val);

        WriteChars(
            [in] String str);

        WriteDouble(
            [in] Double val);

        WriteFloat(
            [in] Float val);

        WriteInt32(
            [in] Int32 val);

        WriteInt64(
            [in] Int64 val);

        WriteInt16(
            [in] Int32 val);

        WriteUTF(
            [in] String str);
    }

    } // namespace IO
    } // namespace Elastos
}