//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Utility.ITimerTask;
    interface Elastos.Utility.IDate;

    namespace Elastos {
    namespace Utility {

    interface ITimer {
        /**
         * Cancels the {@code Timer} and all scheduled tasks. If there is a
         * currently running task it is not affected. No more tasks may be scheduled
         * on this {@code Timer}. Subsequent calls do nothing.
         */
        Cancel();

        /**
         * Removes all canceled tasks from the task queue. If there are no
         * other references on the tasks, then after this call they are free
         * to be garbage collected.
         *
         * @return the number of canceled tasks that were removed from the task
         *         queue.
         */
        Purge(
            [out] Int32* value);

        /**
         * Schedule a task for single execution. If {@code when} is less than the
         * current time, it will be scheduled to be executed as soon as possible.
         *
         * @param task
         *            the task to schedule.
         * @param when
         *            time of execution.
         * @throws IllegalArgumentException
         *                if {@code when.getTime() < 0}.
         * @throws IllegalStateException
         *                if the {@code Timer} has been canceled, or if the task has been
         *                scheduled or canceled.
         */
        Schedule(
            [in] ITimerTask* task,
            [in] IDate* when);

        /**
         * Schedule a task for single execution after a specified delay.
         *
         * @param task
         *            the task to schedule.
         * @param delay
         *            amount of time in milliseconds before execution.
         * @throws IllegalArgumentException
         *                if {@code delay < 0}.
         * @throws IllegalStateException
         *                if the {@code Timer} has been canceled, or if the task has been
         *                scheduled or canceled.
         */
        Schedule(
            [in] ITimerTask* task,
            [in] Int64 delay);

        /**
         * Schedule a task for repeated fixed-delay execution after a specific delay.
         *
         * @param task
         *            the task to schedule.
         * @param delay
         *            amount of time in milliseconds before first execution.
         * @param period
         *            amount of time in milliseconds between subsequent executions.
         * @throws IllegalArgumentException
         *                if {@code delay < 0} or {@code period <= 0}.
         * @throws IllegalStateException
         *                if the {@code Timer} has been canceled, or if the task has been
         *                scheduled or canceled.
         */
        Schedule(
            [in] ITimerTask* task,
            [in] Int64 delay,
            [in] Int64 period);

        /**
         * Schedule a task for repeated fixed-delay execution after a specific time
         * has been reached.
         *
         * @param task
         *            the task to schedule.
         * @param when
         *            time of first execution.
         * @param period
         *            amount of time in milliseconds between subsequent executions.
         * @throws IllegalArgumentException
         *                if {@code when.getTime() < 0} or {@code period <= 0}.
         * @throws IllegalStateException
         *                if the {@code Timer} has been canceled, or if the task has been
         *                scheduled or canceled.
         */
        Schedule(
            [in] ITimerTask* task,
            [in] IDate* when,
            [in] Int64 period);

        /**
         * Schedule a task for repeated fixed-rate execution after a specific delay
         * has passed.
         *
         * @param task
         *            the task to schedule.
         * @param delay
         *            amount of time in milliseconds before first execution.
         * @param period
         *            amount of time in milliseconds between subsequent executions.
         * @throws IllegalArgumentException
         *                if {@code delay < 0} or {@code period <= 0}.
         * @throws IllegalStateException
         *                if the {@code Timer} has been canceled, or if the task has been
         *                scheduled or canceled.
         */
        ScheduleAtFixedRate(
            [in] ITimerTask* task,
            [in] Int64 delay,
            [in] Int64 period);

        /**
         * Schedule a task for repeated fixed-rate execution after a specific time
         * has been reached.
         *
         * @param task
         *            the task to schedule.
         * @param when
         *            time of first execution.
         * @param period
         *            amount of time in milliseconds between subsequent executions.
         * @throws IllegalArgumentException
         *                if {@code when.getTime() < 0} or {@code period <= 0}.
         * @throws IllegalStateException
         *                if the {@code Timer} has been canceled, or if the task has been
         *                scheduled or canceled.
         */
        ScheduleAtFixedRate(
            [in] ITimerTask* task,
            [in] IDate *when,
            [in] Int64 period);
    }

    } // namespace Utility
    } // namespace Elastos
}
