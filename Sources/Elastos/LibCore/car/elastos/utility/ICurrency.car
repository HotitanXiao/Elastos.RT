//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Utility.ILocale;

    namespace Elastos {
    namespace Utility {

    interface ICurrency {
        /**
         * Returns this currency's ISO 4217 currency code.
         */
        GetCurrencyCode(
            [out] String* str);

        /**
         * Equivalent to {@code getDisplayName(Locale.getDefault())}.
         * See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
         * @since 1.7
         * @hide 1.7
         */
        GetDisplayName(
            [out] String* str);

        /**
         * Returns the localized name of this currency in the given {@code locale}.
         * Returns the ISO 4217 currency code if no localized name is available.
         * @since 1.7
         * @hide 1.7
         */
        GetDisplayName(
            [in] ILocale* locale,
            [out] String* str);

        /**
         * Equivalent to {@code getSymbol(Locale.getDefault())}.
         * See "<a href="../util/Locale.html#default_locale">Be wary of the default locale</a>".
         */
        GetSymbol(
            [out] String* str);

        /**
         * Returns the localized currency symbol for this currency in {@code locale}.
         * That is, given "USD" and Locale.US, you'd get "$", but given "USD" and a non-US locale,
         * you'd get "US$".
         *
         * <p>If the locale only specifies a language rather than a language and a country (such as
         * {@code Locale.JAPANESE} or {new Locale("en", "")} rather than {@code Locale.JAPAN} or
         * {new Locale("en", "US")}), the ISO 4217 currency code is returned.
         *
         * <p>If there is no locale-specific currency symbol, the ISO 4217 currency code is returned.
         */
        GetSymbol(
            [in] ILocale* locale,
            [out] String* str);

        /**
         * Returns the default number of fraction digits for this currency.
         * For instance, the default number of fraction digits for the US dollar is 2 because there are
         * 100 US cents in a US dollar. For the Japanese Yen, the number is 0 because coins smaller
         * than 1 Yen became invalid in 1953. In the case of pseudo-currencies, such as
         * IMF Special Drawing Rights, -1 is returned.
         */
        GetDefaultFractionDigits(
            [out] Int32* value);

        /**
         * Returns this currency's ISO 4217 currency code.
         */
        // @Override
        ToString(
            [out] String* str);
    }

    interface ICurrencyHelper {
        /**
         * Returns the {@code Currency} instance for the given ISO 4217 currency code.
         * @throws IllegalArgumentException
         *             if the currency code is not a supported ISO 4217 currency code.
         */
        GetInstance(
            [in] String currencyCode,
            [out] ICurrency** outcur);

            /**
         * Returns the {@code Currency} instance for this {@code Locale}'s country.
         * @throws IllegalArgumentException
         *             if the locale's country is not a supported ISO 3166 country.
         */
        GetInstance(
            [in] ILocale* locale,
            [out] ICurrency** outcur);

        /**
         * Returns a set of all known currencies.
         * @since 1.7
         * @hide 1.7
         */
        GetAvailableCurrencies(
            [out] ISet** currencies);
    }

    } // namespace Utility
    } // namespace Elastos
}
