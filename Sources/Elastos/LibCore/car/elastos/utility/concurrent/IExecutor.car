//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Core.IRunnable;

    namespace Elastos {
    namespace Utility {
    namespace Concurrent {

    /**
     * An object that executes submitted {@link Runnable} tasks. This
     * interface provides a way of decoupling task submission from the
     * mechanics of how each task will be run, including details of thread
     * use, scheduling, etc.  An <tt>Executor</tt> is normally used
     * instead of explicitly creating threads. For example, rather than
     * invoking <tt>new Thread(new(RunnableTask())).start()</tt> for each
     * of a set of tasks, you might use:
     *
     * <pre>
     * Executor executor = <em>anExecutor</em>;
     * executor.execute(new RunnableTask1());
     * executor.execute(new RunnableTask2());
     * ...
     * </pre>
     *
     * However, the <tt>Executor</tt> interface does not strictly
     * require that execution be asynchronous. In the simplest case, an
     * executor can run the submitted task immediately in the caller's
     * thread:
     *
     *  <pre> {@code
     * class DirectExecutor implements Executor {
     *   public void execute(Runnable r) {
     *     r.run();
     *   }
     * }}</pre>
     *
     * More typically, tasks are executed in some thread other
     * than the caller's thread.  The executor below spawns a new thread
     * for each task.
     *
     *  <pre> {@code
     * class ThreadPerTaskExecutor implements Executor {
     *   public void execute(Runnable r) {
     *     new Thread(r).start();
     *   }
     * }}</pre>
     *
     * Many <tt>Executor</tt> implementations impose some sort of
     * limitation on how and when tasks are scheduled.  The executor below
     * serializes the submission of tasks to a second executor,
     * illustrating a composite executor.
     *
     *  <pre> {@code
     * class SerialExecutor implements Executor {
     *   final Queue<Runnable> tasks = new ArrayDeque<Runnable>();
     *   final Executor executor;
     *   Runnable active;
     *
     *   SerialExecutor(Executor executor) {
     *     this.executor = executor;
     *   }
     *
     *   public synchronized void execute(final Runnable r) {
     *     tasks.offer(new Runnable() {
     *       public void run() {
     *         try {
     *           r.run();
     *         } finally {
     *           scheduleNext();
     *         }
     *       }
     *     });
     *     if (active == null) {
     *       scheduleNext();
     *     }
     *   }
     *
     *   protected synchronized void scheduleNext() {
     *     if ((active = tasks.poll()) != null) {
     *       executor.execute(active);
     *     }
     *   }
     * }}</pre>
     *
     * The <tt>Executor</tt> implementations provided in this package
     * implement {@link ExecutorService}, which is a more extensive
     * interface.  The {@link ThreadPoolExecutor} class provides an
     * extensible thread pool implementation. The {@link Executors} class
     * provides convenient factory methods for these Executors.
     *
     * <p>Memory consistency effects: Actions in a thread prior to
     * submitting a {@code Runnable} object to an {@code Executor}
     * <a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a>
     * its execution begins, perhaps in another thread.
     *
     * @since 1.5
     * @author Doug Lea
     */
    interface IExecutor {
        /**
         * Executes the given command at some time in the future.  The command
         * may execute in a new thread, in a pooled thread, or in the calling
         * thread, at the discretion of the <tt>Executor</tt> implementation.
         *
         * @param command the runnable task
         * @throws RejectedExecutionException if this task cannot be
         * accepted for execution.
         * @throws NullPointerException if command is null
         */
        Execute(
            [in] IRunnable* command);
    }

    } // namespace Concurrent
    } // namespace Utility
    } // namespace Elastos
}