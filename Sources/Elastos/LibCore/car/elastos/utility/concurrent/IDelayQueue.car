//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    namespace Elastos {
    namespace Utility {
    namespace Concurrent {
    // BEGIN android-note
    // removed link to collections framework docs
    // END android-note

    /**
     * An unbounded {@linkplain BlockingQueue blocking queue} of
     * <tt>Delayed</tt> elements, in which an element can only be taken
     * when its delay has expired.  The <em>head</em> of the queue is that
     * <tt>Delayed</tt> element whose delay expired furthest in the
     * past.  If no delay has expired there is no head and <tt>poll</tt>
     * will return <tt>null</tt>. Expiration occurs when an element's
     * <tt>getDelay(TimeUnit.NANOSECONDS)</tt> method returns a value less
     * than or equal to zero.  Even though unexpired elements cannot be
     * removed using <tt>take</tt> or <tt>poll</tt>, they are otherwise
     * treated as normal elements. For example, the <tt>size</tt> method
     * returns the count of both expired and unexpired elements.
     * This queue does not permit null elements.
     *
     * <p>This class and its iterator implement all of the
     * <em>optional</em> methods of the {@link Collection} and {@link
     * Iterator} interfaces.  The Iterator provided in method {@link
     * #iterator()} is <em>not</em> guaranteed to traverse the elements of
     * the DelayQueue in any particular order.
     *
     * @since 1.5
     * @author Doug Lea
     * @param <E> the type of elements held in this collection
     */

    /**
     * @Involve
     * interface IIterable;
     * interface ICollection;
     * interface IQueue;
     * interface IBlockingQueue;
     */
    interface IDelayQueue {
        /**
         * Identity-based version for use in Itr.remove
         */
        RemoveEQ(
            [in] IInterface* o);
    }

    } // namespace Concurrent
    } // namespace Utility
    } // namespace Elastos
}
