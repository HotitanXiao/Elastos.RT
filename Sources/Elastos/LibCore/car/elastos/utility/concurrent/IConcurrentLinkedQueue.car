//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    namespace Elastos {
    namespace Utility {
    namespace Concurrent {
    // BEGIN android-note
    // removed link to collections framework docs
    // END android-note

    /**
     * An unbounded thread-safe {@linkplain Queue queue} based on linked nodes.
     * This queue orders elements FIFO (first-in-first-out).
     * The <em>head</em> of the queue is that element that has been on the
     * queue the longest time.
     * The <em>tail</em> of the queue is that element that has been on the
     * queue the shortest time. New elements
     * are inserted at the tail of the queue, and the queue retrieval
     * operations obtain elements at the head of the queue.
     * A {@code ConcurrentLinkedQueue} is an appropriate choice when
     * many threads will share access to a common collection.
     * Like most other concurrent collection implementations, this class
     * does not permit the use of {@code null} elements.
     *
     * <p>This implementation employs an efficient &quot;wait-free&quot;
     * algorithm based on one described in <a
     * href="http://www.cs.rochester.edu/u/michael/PODC96.html"> Simple,
     * Fast, and Practical Non-Blocking and Blocking Concurrent Queue
     * Algorithms</a> by Maged M. Michael and Michael L. Scott.
     *
     * <p>Iterators are <i>weakly consistent</i>, returning elements
     * reflecting the state of the queue at some point at or since the
     * creation of the iterator.  They do <em>not</em> throw {@link
     * java.util.ConcurrentModificationException}, and may proceed concurrently
     * with other operations.  Elements contained in the queue since the creation
     * of the iterator will be returned exactly once.
     *
     * <p>Beware that, unlike in most collections, the {@code size} method
     * is <em>NOT</em> a constant-time operation. Because of the
     * asynchronous nature of these queues, determining the current number
     * of elements requires a traversal of the elements, and so may report
     * inaccurate results if this collection is modified during traversal.
     * Additionally, the bulk operations {@code addAll},
     * {@code removeAll}, {@code retainAll}, {@code containsAll},
     * {@code equals}, and {@code toArray} are <em>not</em> guaranteed
     * to be performed atomically. For example, an iterator operating
     * concurrently with an {@code addAll} operation might view only some
     * of the added elements.
     *
     * <p>This class and its iterator implement all of the <em>optional</em>
     * methods of the {@link Queue} and {@link Iterator} interfaces.
     *
     * <p>Memory consistency effects: As with other concurrent
     * collections, actions in a thread prior to placing an object into a
     * {@code ConcurrentLinkedQueue}
     * <a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a>
     * actions subsequent to the access or removal of that element from
     * the {@code ConcurrentLinkedQueue} in another thread.
     *
     * @since 1.5
     * @author Doug Lea
     * @param <E> the type of elements held in this collection
     *
     */

    /**
     * @Involve
     * interface IIterable;
     * interface ICollection;
     * interface IQueue;
     */
    interface IConcurrentLinkedQueue {
    }

    } // namespace Concurrent
    } // namespace Utility
    } // namespace Elastos
}
