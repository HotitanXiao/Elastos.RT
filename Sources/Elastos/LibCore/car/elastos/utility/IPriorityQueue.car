//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Core.IComparator;

    namespace Elastos {
    namespace Utility {

    /**
     * A {@code Set} is a data structure which does not allow duplicate elements.
     *
     * @since 1.2
     */
    /**
     * @Involve
     * interface IIterable;
     * interface ICollection;
     * interface IQueue;
     */
    [deprecated]
    interface IPriorityQueue {
        /**
         * Gets the comparator of the priority queue.
         *
         * @return the comparator of the priority queue or null if the natural
         *         ordering is used.
         */
        GetComparator(
            [out] IComparator** outcom);

        /**
         * interfaces from IQueue
         *
         */
        Offer(
            [in] IInterface* e,
            [out] Boolean* result);

        Remove(
            [out] IInterface** e);

        Poll(
            [out] IInterface** e);

        GetElement(
            [out] IInterface** e);

        Peek(
            [out] IInterface** e);


        /**
         * interfaces from ICollection
         *
         */
        GetIterator(
            [out] IIterator** it);

        Add(
            [in] IInterface* object,
            [out] Boolean* modified);

        Add(
            [in] IInterface* object);

        AddAll(
            [in] ICollection* collection,
            [out] Boolean* modified);

        AddAll(
            [in] ICollection* collection);

        Clear();

        Contains(
            [in] IInterface* object,
            [out] Boolean* result);

        ContainsAll(
            [in] ICollection* collection,
            [out] Boolean* result);

        Equals(
            [in] IInterface* object,
            [out] Boolean* result);

        GetHashCode(
            [out] Int32* hashCode);

        IsEmpty(
            [out] Boolean* result);

        Remove(
            [in] IInterface* object,
            [out] Boolean* modified);

        RemoveAll(
            [in] ICollection* collection,
            [out] Boolean* modified);

        RemoveAll(
            [in] ICollection* collection);

        RetainAll(
            [in] ICollection* collection,
            [out] Boolean* modified);

        RetainAll(
            [in] ICollection* collection);

        GetSize(
            [out] Int32* size);

        ToArray(
            [out, callee] ArrayOf<IInterface*>* array);

        ToArray(
            [in] ArrayOf<IInterface*>* inArray,
            [out, callee] ArrayOf<IInterface*>* outArray);
    }

    } // namespace Utility
    } // namespace Elastos
}