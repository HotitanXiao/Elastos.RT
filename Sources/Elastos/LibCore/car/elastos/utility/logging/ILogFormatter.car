//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Utility.Logging.ILogRecord;
    interface Elastos.Utility.Logging.ILogHandler;

    namespace Elastos {
    namespace Utility {
    namespace Logging {
    /**
     * {@code Formatter} objects are used to format {@link LogRecord} objects into a
     * string representation. Head and tail strings are sometimes used to wrap a set
     * of records. The {@code getHead} and {@code getTail} methods are used for this
     * purpose.
     */
    interface ILogFormatter {
        /**
         * Converts a {@link LogRecord} object into a string representation. The
         * resulted string is usually localized and includes the message field of
         * the record.
         *
         * @param r
         *            the log record to be formatted into a string.
         * @return the formatted string.
         */
        Format(
            [in] ILogRecord* r,
            [out] String* str);

        /**
         * Formats a {@code LogRecord} object into a localized string
         * representation. This is a convenience method for subclasses of {@code
         * Formatter}.
         * <p>
         * The message string is firstly localized using the {@code ResourceBundle}
         * object associated with the supplied {@code LogRecord}.
         * <p>
         * Notice : if message contains "{0", then java.text.MessageFormat is used.
         * Otherwise no formatting is performed.
         *
         * @param r
         *            the log record to be formatted.
         * @return the string resulted from the formatting.
         */
        FormatMessage(
            [in] ILogRecord* r,
            [out] String* str);

        /**
         * Gets the head string used to wrap a set of log records. This base class
         * always returns an empty string.
         *
         * @param h
         *            the target handler.
         * @return the head string used to wrap a set of log records, empty in this
         *         implementation.
         */
        GetHead(
            [in] ILogHandler* h,
            [out] String* str);

        /**
         * Gets the tail string used to wrap a set of log records. This base class
         * always returns the empty string.
         *
         * @param h
         *            the target handler.
         * @return the tail string used to wrap a set of log records, empty in this
         *         implementation.
         */
        GetTail(
            [in] ILogHandler* h,
            [out] String* str);
    }

    } // namespace Logging
    } // namespace Utility
    } // namespace Elastos
}
