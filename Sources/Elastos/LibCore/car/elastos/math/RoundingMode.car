//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    namespace Elastos {
    namespace Math {

    /**
     * Specifies the rounding behavior for operations whose results cannot be
     * represented exactly.
     */
    enum RoundingMode {
        /**
         * Rounding mode where positive values are rounded towards positive infinity
         * and negative values towards negative infinity.
         * <br>
         * Rule: {x.round().abs() >= x.abs()}
         */
        RoundingMode_UP = 0, //BigDecimal.ROUND_UP

        /**
         * Rounding mode where the values are rounded towards zero.
         * <br>
         * Rule: {x.round().abs() <= x.abs()}
         */
        RoundingMode_DOWN = 1, //BigDecimal_ROUND_DOWN

        /**
         * Rounding mode to round towards positive infinity. For positive values
         * this rounding mode behaves as UP, for negative values as DOWN.
         *
         * @sa #UP
         * @sa #DOWN
         * <br>
         * Rule: {x.round() >= x}
         */
        RoundingMode_CEILING = 2, //BigDecimal_ROUND_CEILING

        /**
         * Rounding mode to round towards negative infinity. For positive values
         * this rounding mode behaves as DOWN, for negative values as UP.
         *
         * @sa #UP
         * @sa #DOWN
         * <br>
         * Rule: {x.round() <= x}
         */
        RoundingMode_FLOOR = 3, //BigDecimal_ROUND_FLOOR

        /**
         * Rounding mode where values are rounded towards the nearest neighbor. Ties
         * are broken by rounding up.
         */
        RoundingMode_HALF_UP = 4, //BigDecimal_ROUND_HALF_UP

        /**
         * Rounding mode where values are rounded towards the nearest neighbor. Ties
         * are broken by rounding down.
         */
        RoundingMode_HALF_DOWN = 5, //BigDecimal_ROUND_HALF_DOWN

        /**
         * Rounding mode where values are rounded towards the nearest neighbor. Ties
         * are broken by rounding to the even neighbor.
         */
        RoundingMode_HALF_EVEN = 6, //BigDecimal_ROUND_HALF_EVEN

        /**
         * Rounding mode where the rounding operations throws an ArithmeticException
         * for the case that rounding is necessary, i.e. for the case that the value
         * cannot be represented exactly.
         */
        RoundingMode_UNNECESSARY = 7, //BigDecimal_ROUND_UNNECESSARY
    }

    } // namespace Math
    } // namespace Elastos
}
