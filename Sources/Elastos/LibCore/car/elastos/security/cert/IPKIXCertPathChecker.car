//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Utility.ISet;
    interface Elastos.Utility.ICollection;
    interface Elastos.Security.Cert.ICertificate;

    namespace Elastos {
    namespace Security {
    namespace Cert {

    /**
      * @Involve
      * interface Elastos.Core.ICloneable;
      */
    interface IPKIXCertPathChecker {
        /**
         * Initializes this {@code PKIXCertPathChecker} instance for specified
         * <i>checking direction</i>.
         *
         * @param forward
         *            the direction of the certification path processing, {@code
         *            true} if the certificates are processed in forward direction
         *            (from target to trusted CA), {@code false} if processed in
         *            reverse direction (from trusted CA to target).
         * @throws CertPathValidatorException
         *             if initialization of this {@code PKIXCertPathChecker}
         *             instance fails, or if it cannot process certificates in the
         *             specified order.
         */
        Init(
            [in] Boolean forward);

        /**
         * Returns whether this {@code PKIXCertPathChecker} instance supports
         * <i>forward checking</i>.
         *
         * @return {@code true} if this {@code PKIXCertPathChecker} instance
         *         supports forward checking, otherwise {@code false}.
         */
        IsForwardCheckingSupported(
            [out] Boolean* result);

        /**
         * Returns the list of extensions of X.509 certificates that this {@code
         * PKIXCertPathChecker} is able to process.
         *
         * @return the list of extensions of X.509 certificates that this {@code
         *         PKIXCertPathChecker} is able to process, or {@code null} if there
         *         are none.
         */
        GetSupportedExtensions(
            [out] ISet** extensions);

        /**
         * Checks the specified certificate and removes the processed critical
         * extensions from the specified list of X.509 extension <i>OID</i>s.
         *
         * @param cert
         *            the certificate.
         * @param unresolvedCritExts
         *            the list of critical X.509 extension OID strings.
         * @throws CertPathValidatorException
         *             if check(s) fail on the specified certificate.
         */
        Check(
            [in] ICertificate* cert,
            [in] ICollection* unresolvedCritExts);
    }

    } // namespace Cert
    } // namespace Security
    } // namespace Elastos
}
