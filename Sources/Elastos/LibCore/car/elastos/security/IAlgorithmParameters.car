//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Security.IProvider;
    interface Elastos.Security.Spec.IAlgorithmParameterSpec;

    namespace Elastos {
    namespace Security {

    [deprecated]
    interface IAlgorithmParameters {
        /**
         * Returns the provider associated with this {@code AlgorithmParameters}.
         *
         * @return the provider associated with this {@code AlgorithmParameters}.
         */
        GetProvider(
            [out] IProvider** provider);

        /**
         * Returns the name of the algorithm.
         *
         * @return the name of the algorithm.
         */
        GetAlgorithm(
            [out] String* algorithm);

        /**
         * Initializes this {@code AlgorithmParameters} with the specified {@code
         * AlgorithmParameterSpec}.
         *
         * @param paramSpec
         *            the parameter specification.
         * @throws InvalidParameterSpecException
         *             if this {@code AlgorithmParameters} has already been
         *             initialized or the given {@code paramSpec} is not appropriate
         *             for initializing this {@code AlgorithmParameters}.
         */
        Init(
            [in] IAlgorithmParameterSpec* paramSpec);

        /**
         * Initializes this {@code AlgorithmParameters} with the specified {@code
         * byte[]} using the default decoding format for parameters. The default
         * encoding format is ASN.1.
         *
         * @param params
         *            the encoded parameters.
         * @throws IOException
         *             if this {@code AlgorithmParameters} has already been
         *             initialized, or the parameter could not be encoded.
         */
        Init(
            [in] ArrayOf<Byte>* params);

        /**
         * Initializes this {@code AlgorithmParameters} with the specified {@code
         * byte[]} using the specified decoding format.
         *
         * @param params
         *            the encoded parameters.
         * @param format
         *            the name of the decoding format.
         * @throws IOException
         *             if this {@code AlgorithmParameters} has already been
         *             initialized, or the parameter could not be encoded.
         */
        Init(
            [in] ArrayOf<Byte>* params,
            [in] String format);

        /**
         * Returns the {@code AlgorithmParameterSpec} for this {@code
         * AlgorithmParameters}.
         *
         * @param paramSpec
         *            the type of the parameter specification in which this
         *            parameters should be converted.
         * @return the {@code AlgorithmParameterSpec} for this {@code
         *         AlgorithmParameters}.
         * @throws InvalidParameterSpecException
         *             if this {@code AlgorithmParameters} has already been
         *             initialized, or if this parameters could not be converted to
         *             the specified class.
         */
        GetParameterSpec(
            [in] ClassID type,
            [out] IInterface** paramSpec);

        /**
         * Returns this {@code AlgorithmParameters} in their default encoding
         * format. The default encoding format is ASN.1.
         *
         * @return the encoded parameters.
         * @throws IOException
         *             if this {@code AlgorithmParameters} has already been
         *             initialized, or if this parameters could not be encoded.
         */
        GetEncoded(
            [out, callee] ArrayOf<Byte>* encoded);

        /**
         * Returns this {@code AlgorithmParameters} in the specified encoding
         * format.
         *
         * @param format
         *            the name of the encoding format.
         * @return the encoded parameters.
         * @throws IOException
         *             if this {@code AlgorithmParameters} has already been
         *             initialized, or if this parameters could not be encoded.
         */
        GetEncoded(
            [in] String format,
            [out, callee] ArrayOf<Byte>* encoded);
    }

    interface IAlgorithmParametersHelper {
        /**
         * Returns a new instance of {@code AlgorithmParameters} for the specified
         * algorithm.
         *
         * @param algorithm
         *            the name of the algorithm to use.
         * @return a new instance of {@code AlgorithmParameters} for the specified
         *         algorithm.
         * @throws NoSuchAlgorithmException
         *             if the specified algorithm is not available.
         * @throws NullPointerException
         *             if {@code algorithm} is {@code null}.
         */
        GetInstance(
            [in] String algorithm,
            [out] IAlgorithmParameters** instance);

        /**
         * Returns a new instance of {@code AlgorithmParameters} from the specified
         * provider for the specified algorithm.
         *
         * @param algorithm
         *            the name of the algorithm to use.
         * @param provider
         *            name of the provider of the {@code AlgorithmParameters}.
         * @return a new instance of {@code AlgorithmParameters} for the specified
         *         algorithm.
         * @throws NoSuchAlgorithmException
         *             if the specified algorithm is not available.
         * @throws NoSuchProviderException
         *             if the specified provider is not available.
         * @throws IllegalArgumentException if {@code provider == null || provider.isEmpty()}
         * @throws NullPointerException
         *             if {@code algorithm} is {@code null}.
         */
        GetInstance(
            [in] String algorithm,
            [in] String provider,
            [out] IAlgorithmParameters** instance);

        /**
         * Returns a new instance of {@code AlgorithmParameters} from the specified
         * provider for the specified algorithm.
         *
         * @param algorithm
         *            the name of the algorithm to use.
         * @param provider
         *            the provider of the {@code AlgorithmParameters}.
         * @return a new instance of {@code AlgorithmParameters} for the specified
         *         algorithm.
         * @throws NoSuchAlgorithmException
         *             if the specified algorithm is not available.
         * @throws NullPointerException
         *             if {@code algorithm} is {@code null}.
         * @throws IllegalArgumentException if {@code provider == null}
         */
        GetInstance(
            [in] String algorithm,
            [in] IProvider* provider,
            [out] IAlgorithmParameters** instance);
    }

    } // namespace Security
    } // namespace Elastos
}
