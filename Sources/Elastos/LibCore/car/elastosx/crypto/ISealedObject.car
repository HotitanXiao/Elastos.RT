//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Security.IKey;

    namespace Elastosx {
    namespace Crypto {

    /**
     * A {@code SealedObject} is a wrapper around a {@code serializable} object
     * instance and encrypts it using a cryptographic cipher.
     *
     * <p>Since a {@code SealedObject} instance is serializable it can
     * either be stored or transmitted over an insecure channel.
     *
     * <p>The wrapped object can later be decrypted (unsealed) using the corresponding
     * key and then be deserialized to retrieve the original object. The sealed
     * object itself keeps track of the cipher and corresponding parameters.
     */
    /**
     * @Involve
     * interface Elastos.IO.ISerializable
     */
    interface ISealedObject {
        /**
         * Returns the algorithm this object was sealed with.
         *
         * @return the algorithm this object was sealed with.
         */
        GetAlgorithm(
            [out] String * result);

        /**
         * Returns the wrapped object, decrypting it using the specified key.
         *
         * @param key
         *            the key to decrypt the data with.
         * @return the encapsulated object.
         * @throws IOException
         *             if deserialization fails.
         * @throws ClassNotFoundException
         *             if deserialization fails.
         * @throws NoSuchAlgorithmException
         *             if the algorithm to decrypt the data is not available.
         * @throws InvalidKeyException
         *             if the specified key cannot be used to decrypt the data.
         */
        GetObject(
            [in] IKey * key,
            [out] IInterface ** result);

        /**
         * Returns the wrapped object, decrypting it using the specified
         * cipher.
         *
         * @param c
         *            the cipher to decrypt the data.
         * @return the encapsulated object.
         * @throws IOException
         *             if deserialization fails.
         * @throws ClassNotFoundException
         *             if deserialization fails.
         * @throws IllegalBlockSizeException
         *             if the specified cipher is a block cipher and the length of
         *             the serialized data is not a multiple of the ciphers block
         *             size.
         * @throws BadPaddingException
         *             if the padding of the data does not match the padding scheme.
         */
        GetObject(
            [in] ICipher * c,
            [out] IInterface ** result);

        /**
         * Returns the wrapped object, decrypting it using the specified key. The
         * specified provider is used to retrieve the cipher algorithm.
         *
         * @param key
         *            the key to decrypt the data.
         * @param provider
         *            the name of the provider that provides the cipher algorithm.
         * @return the encapsulated object.
         * @throws IOException
         *             if deserialization fails.
         * @throws ClassNotFoundException
         *             if deserialization fails.
         * @throws NoSuchAlgorithmException
         *             if the algorithm used to decrypt the data is not available.
         * @throws NoSuchProviderException
         *             if the specified provider is not available.
         * @throws InvalidKeyException
         *             if the specified key cannot be used to decrypt the data.
         */
        GetObject(
            [in] IKey * key,
            [in] String provider,
            [out] IInterface ** result);




    }

    } // namespace Crypto
    } // namespace Elastosx
}
