//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    namespace Elastosx {
    namespace Crypto {
    namespace Spec {

    /**
     * The key specification for a <i>password based encryption</i> key.
     * <p>
     * Password based encryption is described in <a
     * href="http://www.ietf.org/rfc/rfc2898.txt">PKCS #5</a>.
     */
    /**
     * @Involve
     * interface Elastos.Security.Spec.IKeySpec;
     */
    interface IPBEKeySpec {
        /**
         * Clears the password by overwriting it.
         */
        ClearPassword();

        /**
         * Returns a copy of the password of this key specification.
         *
         * @return a copy of the password of this key specification.
         * @throws IllegalStateException
         *             if the password has been cleared before.
         */
        GetPassword(
            [out, callee] ArrayOf<Char32> * pwd);

        /**
         * Returns a copy of the salt of this key specification.
         *
         * @return a copy of the salt of this key specification or null if none is
         *         specified.
         */
        GetSalt(
            [out, callee] ArrayOf<Byte> * salt);

        /**
         * Returns the iteration count of this key specification.
         *
         * @return the iteration count of this key specification.
         */
        GetIterationCount(
            [out] Int32 * count);

        /**
         * Returns the desired key length of the derived key.
         *
         * @return the desired key length of the derived key.
         */
        GetKeyLength(
            [out] Int32 * length);
    }

    } // namespace Spec
    } // namespace Crypto
    } // namespace Elastosx
}