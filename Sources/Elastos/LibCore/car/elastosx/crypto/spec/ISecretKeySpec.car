//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    namespace Elastosx {
    namespace Crypto {
    namespace Spec {

    /**
     * A key specification for a <code>SecretKey</code> and also a secret key
     * implementation that is provider-independent. It can be used for raw secret
     * keys that can be specified as <code>byte[]</code>.
     */
    /**
     * @Involve
     * interface Elastos.Security.Spec.IKeySpec;
     * interface Elastosx.Crypto.ISecretKey;
     */
    interface ISecretKeySpec {
        /**
         * Returns the algorithm name.
         *
         * @return the algorithm name.
         */
        GetAlgorithm(
            [out] String * value);

        /**
         * Returns the name of the format used to encode the key.
         *
         * @return the format name "RAW".
         */
        GetFormat(
            [out] String * value);

        /**
         * Returns the encoded form of this secret key.
         *
         * @return the encoded form of this secret key.
         */
        GetEncoded(
            [out, callee] ArrayOf<Byte> * value);
    }


    } // namespace Spec
    } // namespace Crypto
    } // namespace Elastosx
}