//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    importlib("Elastos.CoreLibrary.eco");

    merge("../../../car/org/conscrypt/IPlatform.car");

    merge("../../../car/org/conscrypt/IAbstractSessionContext.car");
    merge("../../../car/org/conscrypt/IByteArray.car");
    merge("../../../car/org/conscrypt/IChainStrengthAnalyzer.car");
    merge("../../../car/org/conscrypt/IClientSessionContext.car");
    merge("../../../car/org/conscrypt/ICryptoUpcalls.car");
    merge("../../../car/org/conscrypt/IDefaultSSLContextImpl.car");
    merge("../../../car/org/conscrypt/IFileClientSessionCache.car");
    merge("../../../car/org/conscrypt/IKeyManagerFactoryImpl.car");
    merge("../../../car/org/conscrypt/IKeyManagerImpl.car");
    merge("../../../car/org/conscrypt/INativeCrypto.car");
    merge("../../../car/org/conscrypt/IOpenSSLBIOInputStream.car");
    merge("../../../car/org/conscrypt/IOpenSSLBIOSink.car");
    merge("../../../car/org/conscrypt/IOpenSSLBIOSource.car");
    merge("../../../car/org/conscrypt/IOpenSSLCipher.car");
    merge("../../../car/org/conscrypt/IOpenSSLCipherContext.car");
    merge("../../../car/org/conscrypt/IOpenSSLCipherRSA.car");
    merge("../../../car/org/conscrypt/IOpenSSLContextImpl.car");
    merge("../../../car/org/conscrypt/IOpenSSLDHKeyFactory.car");
    merge("../../../car/org/conscrypt/IOpenSSLDHKeyPairGenerator.car");
    merge("../../../car/org/conscrypt/IOpenSSLDHPrivateKey.car");
    merge("../../../car/org/conscrypt/IOpenSSLDHPublicKey.car");
    merge("../../../car/org/conscrypt/IOpenSSLDSAKeyFactory.car");
    merge("../../../car/org/conscrypt/IOpenSSLDSAKeyPairGenerator.car");
    merge("../../../car/org/conscrypt/IOpenSSLDSAParams.car");
    merge("../../../car/org/conscrypt/IOpenSSLDSAPrivateKey.car");
    merge("../../../car/org/conscrypt/IOpenSSLDSAPublicKey.car");
    merge("../../../car/org/conscrypt/IOpenSSLDigestContext.car");
    merge("../../../car/org/conscrypt/IOpenSSLECDHKeyAgreement.car");
    merge("../../../car/org/conscrypt/IOpenSSLECGroupContext.car");
    merge("../../../car/org/conscrypt/IOpenSSLECKeyFactory.car");
    merge("../../../car/org/conscrypt/IOpenSSLECKeyPairGenerator.car");
    merge("../../../car/org/conscrypt/IOpenSSLECPointContext.car");
    merge("../../../car/org/conscrypt/IOpenSSLECPrivateKey.car");
    merge("../../../car/org/conscrypt/IOpenSSLECPublicKey.car");
    merge("../../../car/org/conscrypt/IOpenSSLEngine.car");
    merge("../../../car/org/conscrypt/IOpenSSLKey.car");
    merge("../../../car/org/conscrypt/IOpenSSLKeyHolder.car");
    merge("../../../car/org/conscrypt/IOpenSSLMac.car");
    merge("../../../car/org/conscrypt/IOpenSSLMessageDigestJDK.car");
    merge("../../../car/org/conscrypt/IOpenSSLProvider.car");
    merge("../../../car/org/conscrypt/IOpenSSLNativeReference.car");
    merge("../../../car/org/conscrypt/IOpenSSLRSAKeyFactory.car");
    merge("../../../car/org/conscrypt/IOpenSSLRSAKeyPairGenerator.car");
    merge("../../../car/org/conscrypt/IOpenSSLRandom.car");
    merge("../../../car/org/conscrypt/IOpenSSLSecretKey.car");
    merge("../../../car/org/conscrypt/IOpenSSLServerSocketImpl.car");
    merge("../../../car/org/conscrypt/IOpenSSLSocketImpl.car");
    merge("../../../car/org/conscrypt/IOpenSSLX509CRL.car");
    merge("../../../car/org/conscrypt/IOpenSSLX509CertPath.car");
    merge("../../../car/org/conscrypt/IOpenSSLX509Certificate.car");
    merge("../../../car/org/conscrypt/IPSKKeyManager.car");
    merge("../../../car/org/conscrypt/ISSLClientSessionCache.car");
    merge("../../../car/org/conscrypt/ISSLNullSession.car");
    merge("../../../car/org/conscrypt/ISSLRecordProtocol.car");
    merge("../../../car/org/conscrypt/ISSLServerSessionCache.car");
    merge("../../../car/org/conscrypt/IServerSessionContext.car");
    merge("../../../car/org/conscrypt/ISSLParametersImpl.car");
    merge("../../../car/org/conscrypt/IOpenSSLRSAPrivateKey.car");
    merge("../../../car/org/conscrypt/IOpenSSLRSAPublicKey.car");
    merge("../../../car/org/conscrypt/IOpenSSLRSAPrivateCrtKey.car");
    merge("../../../car/org/conscrypt/IOpenSSLServerSocketFactoryImpl.car");
    merge("../../../car/org/conscrypt/IOpenSSLSessionImpl.car");
    merge("../../../car/org/conscrypt/IOpenSSLSignature.car");
    merge("../../../car/org/conscrypt/IOpenSSLSignatureRawRSA.car");
    merge("../../../car/org/conscrypt/IOpenSSLSocketFactoryImpl.car");
    merge("../../../car/org/conscrypt/IOpenSSLSocketImplWrapper.car");
    merge("../../../car/org/conscrypt/IOpenSSLX509CRLEntry.car");
    merge("../../../car/org/conscrypt/IOpenSSLX509CertificateFactory.car");
    merge("../../../car/org/conscrypt/IX509PublicKey.car");
    merge("../../../car/org/conscrypt/IOpenSSLX509V3CertificateGenerator.car");

    using interface Elastos.Core.IArrayOf;
    using interface Elastos.Core.ICloneable;
    using interface Elastos.IO.IByteArrayOutputStream;
    using interface Elastos.IO.ICloseable;
    using interface Elastos.IO.IFilterInputStream;
    using interface Elastos.IO.IInputStream;
    using interface Elastos.IO.ISerializable;
    using interface Elastos.Net.IInetAddress;
    using interface Elastos.Net.ISocket;
    using interface Elastos.Security.IKey;
    using interface Elastos.Security.IKeyStore;
    using interface Elastos.Security.IProvider;
    using interface Elastos.Security.IKeyPairGenerator;
    using interface Elastos.Security.Interfaces.IECPrivateKey;
    using interface Elastos.Security.Interfaces.IECPublicKey;
    using interface Elastos.Security.Interfaces.IECKey;
    using interface Elastos.Security.Spec.IECPrivateKeySpec;
    using interface Elastos.Security.Spec.IECPublicKeySpec;
    using interface Elastos.Security.IMessageDigestSpi;
    using interface Elastos.Security.IPrivateKey;
    using interface Elastos.Security.IPublicKey;
    using interface Elastos.Security.ISecureRandom;
    using interface Elastos.Security.ISignatureSpi;
    using interface Elastos.Security.IKeyFactorySpi;
    using interface Elastos.Security.IKeyPairGeneratorSpi;
    using interface Elastos.Security.ISecureRandomSpi;
    using interface Elastosx.Crypto.ICipherSpi;
    using interface Elastosx.Crypto.IKeyGeneratorSpi;
    using interface Elastos.Security.Cert.IX509Certificate;
    using interface Elastos.Security.Cert.IX509CRLEntry;
    using interface Elastos.Security.Cert.IX509Extension;
    using interface Elastos.Security.Cert.ICertificateFactorySpi;
    using interface Elastos.Security.Spec.IAlgorithmParameterSpec;
    using interface Elastos.Security.Spec.IDSAPrivateKeySpec;
    using interface Elastos.Security.Spec.IDSAPublicKeySpec;
    using interface Elastos.Security.Spec.IRSAPrivateCrtKeySpec;
    using interface Elastos.Security.Spec.IRSAPrivateKeySpec;
    using interface Elastos.Security.Spec.IRSAPublicKeySpec;
    using interface Elastos.Security.Interfaces.IDSAKey;
    using interface Elastos.Security.Interfaces.IDSAParams;
    using interface Elastos.Security.Interfaces.IDSAPrivateKey;
    using interface Elastos.Security.Interfaces.IDSAPublicKey;
    using interface Elastos.Security.Interfaces.IRSAPrivateCrtKey;
    using interface Elastos.Security.Interfaces.IRSAPrivateKey;
    using interface Elastos.Security.Interfaces.IRSAPublicKey;
    using interface Elastos.Security.Interfaces.IRSAKey;
    using interface Elastos.Utility.IList;

    using interface Elastosx.Crypto.IMacSpi;
    using interface Elastosx.Crypto.IKeyAgreementSpi;
    using interface Elastosx.Crypto.Interfaces.IDHKey;
    using interface Elastosx.Crypto.Interfaces.IDHPrivateKey;
    using interface Elastosx.Crypto.Interfaces.IDHPublicKey;
    using interface Elastosx.Crypto.ISecretKey;
    using interface Elastosx.Crypto.Spec.IDHPrivateKeySpec;
    using interface Elastosx.Crypto.Spec.IDHPublicKeySpec;
    using interface Elastosx.Net.Ssl.IKeyManager;
    using interface Elastosx.Net.Ssl.IKeyManagerFactorySpi;
    using interface Elastosx.Net.Ssl.ISSLContextSpi;
    using interface Elastosx.Net.Ssl.ISSLEngine;
    using interface Elastosx.Net.Ssl.ISSLServerSocketFactory;
    using interface Elastosx.Net.Ssl.ISSLSession;
    using interface Elastosx.Net.Ssl.ISSLSessionContext;
    using interface Elastosx.Net.Ssl.ISSLSocket;
    using interface Elastosx.Net.Ssl.ISSLSocketFactory;
    using interface Elastosx.Net.Ssl.ITrustManager;
    using interface Elastosx.Net.Ssl.IX509ExtendedKeyManager;
    using interface Elastosx.Net.Ssl.IX509KeyManager;

    namespace Org {
    namespace Conscrypt {

    class COpenSSLProvider {
        constructor();

        constructor(
            [in] String providerName);

        interface IProvider;
    }

    singleton class CPlatform {
        interface IPlatform;
    }

    class CAbstractSessionContext {
        constructor(
            [in] Int32 maximumSize,
            [in] Int32 timeout);

        interface IAbstractSessionContext;
        interface ISSLSessionContext;
    }

    singleton class CChainStrengthAnalyzer {
        interface IChainStrengthAnalyzer;
    }

    class CClientSessionContext {
        constructor();

        interface IClientSessionContext;
        interface IAbstractSessionContext;
        interface ISSLSessionContext;
    }

    singleton class CCryptoUpcalls {
        interface ICryptoUpcalls;
    }

    class CDefaultSSLContextImpl {
        constructor();

        interface IDefaultSSLContextImpl;
        interface IOpenSSLContextImpl;
        interface ISSLContextSpi;
    }

    singleton class CFileClientSessionCache {
        interface IFileClientSessionCache;
    }

    class CKeyManagerFactoryImpl {
        constructor();

        interface IKeyManagerFactoryImpl;
        interface IKeyManagerFactorySpi;
    }

    [deprecated]
    class CKeyManagerImpl {
        constructor(
            [in] IKeyStore* keyStore,
            [in] ArrayOf<Char32>* pwd);

        interface IKeyManagerImpl;
        interface IX509ExtendedKeyManager;
        interface IX509KeyManager;
        interface IKeyManager;
    }

    class COpenSSLBIOInputStream {
        constructor(
            [in] IInputStream* bytes);

        interface IOpenSSLBIOInputStream;
        interface IFilterInputStream;
        interface IInputStream;
        interface ICloseable;
    }

    class COpenSSLBIOSink {
        constructor(
            [in] IByteArrayOutputStream* buffer);

        interface IOpenSSLBIOSink;
    }

    singleton class COpenSSLBIOSinkHelper {
        interface IOpenSSLBIOSinkHelper;
    }

    class COpenSSLBIOSource {
        constructor(
            [in] IOpenSSLBIOInputStream* source);

        interface IOpenSSLBIOSource;
    }

    singleton class COpenSSLBIOSourceHelper {
        interface IOpenSSLBIOSourceHelper;
    }

    class COpenSSLContextImpl {
        constructor();

        constructor(
            [in] IDefaultSSLContextImpl* dummy);

        interface IOpenSSLContextImpl;
        interface ISSLContextSpi;
    }

    class COpenSSLDHKeyFactory {
        constructor();

        interface IOpenSSLDHKeyFactory;
        interface IKeyFactorySpi;
    }

    class COpenSSLDHKeyPairGenerator {
        constructor();

        interface IOpenSSLDHKeyPairGenerator;
        interface IKeyPairGeneratorSpi;
    }

    class COpenSSLDHPrivateKey {
        constructor(
            [in] IOpenSSLKey* key);

        constructor(
            [in] IDHPrivateKeySpec* dhKeySpec);

        interface IOpenSSLDHPrivateKey;
        interface IDHPrivateKey;
        interface IDHKey;
        interface IPrivateKey;
        interface IOpenSSLKeyHolder;
    }

    class COpenSSLDHPublicKey {
        constructor(
            [in] IOpenSSLKey* key);

        constructor(
            [in] IDHPublicKeySpec* dhKeySpec);

        interface IOpenSSLDHPublicKey;
        interface IDHPublicKey;
        interface IDHKey;
        interface IPublicKey;
        interface IOpenSSLKeyHolder;
    }

    class COpenSSLDigestContext {
        constructor(
            [in] Int64 ctx);

        interface IOpenSSLDigestContext;
        interface IOpenSSLNativeReference;
    }

    class COpenSSLDSAKeyFactory {
        constructor();

        interface IOpenSSLDSAKeyFactory;
        interface IKeyFactorySpi;
    }

    class COpenSSLDSAKeyPairGenerator {
        constructor();

        interface IOpenSSLDSAKeyPairGenerator;
        interface IKeyPairGeneratorSpi;
    }

    class COpenSSLDSAParams {
        constructor(
            [in] IOpenSSLKey* key);

        interface IOpenSSLDSAParams;
        interface IDSAParams;
        interface IAlgorithmParameterSpec;
    }

    class COpenSSLDSAPrivateKey {
        constructor(
            [in] IOpenSSLKey* key);

        constructor(
            [in] IDSAPrivateKeySpec* dsaKeySpec);

        interface IOpenSSLDSAPrivateKey;
        interface IDSAPrivateKey;
        interface IDSAKey;
        interface IPrivateKey;
        interface IKey;
        interface ISerializable;
        interface IOpenSSLKeyHolder;
    }

    singleton class COpenSSLDSAPrivateKeyHelper {
        interface IOpenSSLDSAPrivateKeyHelper;
    }

    class COpenSSLDSAPublicKey {
        constructor(
            [in] IOpenSSLKey* key);

        constructor(
            [in] IDSAPublicKeySpec* dsaKeySpec);

        interface IOpenSSLDSAPublicKey;
        interface IDSAPublicKey;
        interface IDSAKey;
        interface IPublicKey;
        interface IKey;
        interface ISerializable;
        interface IOpenSSLKeyHolder;
    }

    class COpenSSLECDHKeyAgreement {
        constructor();

        interface IOpenSSLECDHKeyAgreement;
        interface IKeyAgreementSpi;
    }

    class COpenSSLECGroupContext {
        constructor(
            [in] Int64 groupCtx);

        interface IOpenSSLECGroupContext;
    }

    singleton class COpenSSLECGroupContextHelper {
        interface IOpenSSLECGroupContextHelper;
    }

    class COpenSSLECKeyFactory {
        constructor();

        interface IOpenSSLECKeyFactory;
        interface IKeyFactorySpi;
    }

    class COpenSSLECKeyPairGenerator {
        constructor();

        interface IOpenSSLECKeyPairGenerator;
        interface IKeyPairGenerator;
        interface IKeyPairGeneratorSpi;
    }

    singleton class COpenSSLECPointContextHelper {
        interface IOpenSSLECPointContextHelper;
    }

    class COpenSSLECPrivateKey {
        constructor();

        constructor(
            [in] IOpenSSLECGroupContext* group,
            [in] IOpenSSLKey* key);

        constructor(
            [in] IOpenSSLKey* key);

        constructor(
            [in] IECPrivateKeySpec* ecKeySpec);

        interface IOpenSSLECPrivateKey;
        interface IECPrivateKey;
        interface IOpenSSLKeyHolder;
        interface IPrivateKey;
        interface IECKey;
        interface IKey;
    }

    singleton class COpenSSLECPrivateKeyHelper {
        interface IOpenSSLECPrivateKeyHelper;
    }

    class COpenSSLECPublicKey {
        constructor();

        constructor(
            [in] IOpenSSLECGroupContext* group,
            [in] IOpenSSLKey* key);

        constructor(
            [in] IOpenSSLKey* key);

        constructor(
            [in] IECPublicKeySpec* ecKeySpec);

        interface IOpenSSLECPublicKey;
        interface IECPublicKey;
        interface IOpenSSLKeyHolder;
        interface IECKey;
        interface IPublicKey;
        interface IKey;
    }

    singleton class COpenSSLECPublicKeyHelper {
        interface IOpenSSLECPublicKeyHelper;
    }

    class COpenSSLEngine {
        constructor(
            [in] Int64 engineCtx);

        interface IOpenSSLEngine;
    }

    singleton class COpenSSLEngineHelper {
        interface IOpenSSLEngineHelper;
    }

    [local]
    class COpenSSLEngineImpl {
        constructor(
            [in] ISSLParametersImpl* sslParameters);

        constructor(
            [in] String host,
            [in] Int32 port,
            [in] ISSLParametersImpl* sslParameters);

        interface ISSLHandshakeCallbacks;
        interface ISSLParametersImplAliasChooser;
        interface ISSLParametersImplPSKCallbacks;
        interface ISSLEngine;
    }

    class COpenSSLKey {
        constructor(
            [in] Int64 ctx);

        constructor(
            [in] Int64 ctx,
            [in] IOpenSSLEngine* engine,
            [in] String alias);

        interface IOpenSSLKey;
    }

    class COpenSSLMacHmacMD5 {
        interface IMacSpi;
        interface IOpenSSLMac;
    }

    class COpenSSLMacHmacSHA1 {
        interface IMacSpi;
        interface IOpenSSLMac;
    }

    class COpenSSLMacHmacSHA224 {
        interface IMacSpi;
        interface IOpenSSLMac;
    }

    class COpenSSLMacHmacSHA256 {
        interface IMacSpi;
        interface IOpenSSLMac;
    }

    class COpenSSLMacHmacSHA384 {
        interface IMacSpi;
        interface IOpenSSLMac;
    }

    class COpenSSLMacHmacSHA512 {
        interface IMacSpi;
        interface IOpenSSLMac;
    }

    class COpenSSLMessageDigestJDK {
        constructor(
            [in] Int64 evp_md,
            [in] Int32 size);

        constructor(
            [in] Int64 evp_md,
            [in] Int32 size,
            [in] IOpenSSLDigestContext* ctx);

        interface IMessageDigestSpi;
        interface IOpenSSLMessageDigestJDK;
        interface ICloneable;
    }

    class COpenSSLMessageDigestJDKMD5 {
        constructor();

        interface IOpenSSLMessageDigestJDKMD5;
        interface IMessageDigestSpi;
        interface IOpenSSLMessageDigestJDK;
        interface ICloneable;
    }

    class COpenSSLMessageDigestJDKSHA1 {
        constructor();

        interface IOpenSSLMessageDigestJDKSHA1;
        interface IMessageDigestSpi;
        interface IOpenSSLMessageDigestJDK;
        interface ICloneable;
    }

    class COpenSSLMessageDigestJDKSHA224 {
        constructor();

        interface IOpenSSLMessageDigestJDKSHA224;
        interface IMessageDigestSpi;
        interface IOpenSSLMessageDigestJDK;
        interface ICloneable;
    }

    class COpenSSLMessageDigestJDKSHA256 {
        constructor();

        interface IOpenSSLMessageDigestJDKSHA256;
        interface IMessageDigestSpi;
        interface IOpenSSLMessageDigestJDK;
        interface ICloneable;
    }

    class COpenSSLMessageDigestJDKSHA384 {
        constructor();

        interface IOpenSSLMessageDigestJDKSHA384;
        interface IMessageDigestSpi;
        interface IOpenSSLMessageDigestJDK;
        interface ICloneable;
    }

    class COpenSSLMessageDigestJDKSHA512 {
        constructor();

        interface IOpenSSLMessageDigestJDKSHA512;
        interface IMessageDigestSpi;
        interface IOpenSSLMessageDigestJDK;
        interface ICloneable;
    }

    class COpenSSLRSAKeyFactory {
        interface IKeyFactorySpi;
        interface IOpenSSLRSAKeyFactory;
    }

    class COpenSSLRSAKeyPairGenerator {
        interface IKeyPairGeneratorSpi;
        interface IOpenSSLRSAKeyPairGenerator;
    }

    [deprecated]
    class COpenSSLRSAPrivateCrtKey {
        constructor(
            [in] IOpenSSLKey* key);

        constructor(
            [in] IOpenSSLKey* key,
            [in] ArrayOf<IArrayOf*>* params);

        constructor(
            [in] IRSAPrivateCrtKeySpec* rsaKeySpec);

        interface IRSAPrivateCrtKey;
        interface IOpenSSLRSAPrivateCrtKey;
        interface IOpenSSLRSAPrivateKey;
        interface IRSAPrivateKey;
        interface IOpenSSLKeyHolder;
        interface IPrivateKey;
        interface IRSAKey;
        interface IKey;
    }

    [deprecated]
    class COpenSSLRSAPrivateKey {
        constructor(
            [in] IOpenSSLKey* key);

        constructor(
            [in] IOpenSSLKey* key,
            [in] ArrayOf<IArrayOf*>* params);

        constructor(
            [in] IRSAPrivateKeySpec* rsaKeySpec);

        interface IOpenSSLRSAPrivateKey;
        interface IRSAPrivateKey;
        interface IOpenSSLKeyHolder;
        interface IPrivateKey;
        interface IRSAKey;
        interface IKey;
        interface ISerializable;
    }

    class COpenSSLRSAPublicKey {
        constructor(
            [in] IOpenSSLKey* key);

        constructor(
            [in] IRSAPublicKeySpec* spec);

        interface IRSAPublicKey;
        interface IPublicKey;
        interface IKey;
        interface ISerializable;
        interface IOpenSSLKeyHolder;
        interface IOpenSSLRSAPublicKey;
    }

    class COpenSSLRandom {
        interface ISecureRandomSpi;
        interface IOpenSSLRandom;
        interface ISerializable;
    }

    class COpenSSLKeyGeneratorTest {
        interface IKeyGeneratorSpi;
    }

    [deprecated]
    class COpenSSLSecretKey {
        constructor(
            [in] String algorithm,
            [in] ArrayOf<Byte>* encoded);

        constructor(
            [in] String algorithm,
            [in] IOpenSSLKey* key);

        interface IKey;
        interface ISecretKey;
        interface IOpenSSLSecretKey;
        interface IOpenSSLKeyHolder;
    }

    [local]
    class COpenSSLServerSocketFactoryImpl {
        constructor();

        constructor(
            [in] ISSLParametersImpl* sslParameters);

        interface ISSLServerSocketFactory;
        interface IOpenSSLServerSocketFactoryImpl;
    }

    [deprecated]
    class COpenSSLSessionImpl {
        constructor(
            [in] Int64 sslSessionNativePointer,
            [in] ArrayOf<IX509Certificate*>* localCertificates,
            [in] ArrayOf<IX509Certificate*>* peerCertificates,
            [in] String peerHost,
            [in] Int32 peerPort,
            [in] IAbstractSessionContext* sessionContext);

        constructor(
            [in] ArrayOf<Byte>* derData,
            [in] String peerHost,
            [in] Int32 peerPort,
            [in] ArrayOf<IX509Certificate*>* peerCertificates,
            [in] IAbstractSessionContext* sessionContext);

        interface ISSLSession;
        interface IOpenSSLSessionImpl;
    }

    class COpenSSLSignature {
        constructor(
            [in] Int64 algorithm,
            [in] EngineType engineType);

        interface IOpenSSLSignature;
        interface ISignatureSpi;
    }

    class COpenSSLSignatureMD5RSA {
        constructor();

        interface IOpenSSLSignatureMD5RSA;
        interface IOpenSSLSignature;
        interface ISignatureSpi;
    }

    class COpenSSLSignatureSHA1RSA {
        constructor();

        interface IOpenSSLSignatureSHA1RSA;
        interface IOpenSSLSignature;
        interface ISignatureSpi;
    }

    class COpenSSLSignatureSHA224RSA {
        constructor();

        interface IOpenSSLSignatureSHA224RSA;
        interface IOpenSSLSignature;
        interface ISignatureSpi;
    }

    class COpenSSLSignatureSHA256RSA {
        constructor();

        interface IOpenSSLSignatureSHA256RSA;
        interface IOpenSSLSignature;
        interface ISignatureSpi;
    }

    class COpenSSLSignatureSHA384RSA {
        constructor();

        interface IOpenSSLSignatureSHA384RSA;
        interface IOpenSSLSignature;
        interface ISignatureSpi;
    }

    class COpenSSLSignatureSHA512RSA {
        constructor();

        interface IOpenSSLSignatureSHA512RSA;
        interface IOpenSSLSignature;
        interface ISignatureSpi;
    }

    class COpenSSLSignatureSHA1DSA {
        constructor();

        interface IOpenSSLSignatureSHA1DSA;
        interface IOpenSSLSignature;
        interface ISignatureSpi;
    }

    class COpenSSLSignatureSHA1ECDSA {
        constructor();

        interface IOpenSSLSignatureSHA1ECDSA;
        interface IOpenSSLSignature;
        interface ISignatureSpi;
    }

    class COpenSSLSignatureSHA224ECDSA {
        constructor();

        interface IOpenSSLSignatureSHA224ECDSA;
        interface IOpenSSLSignature;
        interface ISignatureSpi;
    }

    class COpenSSLSignatureSHA256ECDSA {
        constructor();

        interface IOpenSSLSignatureSHA256ECDSA;
        interface IOpenSSLSignature;
        interface ISignatureSpi;
    }

    class COpenSSLSignatureSHA384ECDSA {
        constructor();

        interface IOpenSSLSignatureSHA384ECDSA;
        interface IOpenSSLSignature;
        interface ISignatureSpi;
    }

    class COpenSSLSignatureSHA512ECDSA {
        constructor();

        interface IOpenSSLSignatureSHA512ECDSA;
        interface IOpenSSLSignature;
        interface ISignatureSpi;
    }

    class COpenSSLSignatureRawRSA {
        interface IOpenSSLSignatureRawRSA;
        interface ISignatureSpi;
    }

    [local]
    class COpenSSLSocketFactoryImpl {
        constructor();

        constructor(
            [in] ISSLParametersImpl* sslParameters);

        interface IOpenSSLSocketFactoryImpl;
        interface ISSLSocketFactory;
    }

    [local]
    class COpenSSLSocketImpl {
        constructor(
            [in] ISSLParametersImpl* sslParameters);

        constructor(
            [in] String host,
            [in] Int32 port,
            [in] ISSLParametersImpl* sslParameters);

        constructor(
            [in] IInetAddress* address,
            [in] Int32 port,
            [in] ISSLParametersImpl* sslParameters);

        constructor(
            [in] String host,
            [in] Int32 port,
            [in] IInetAddress* clientAddress,
            [in] Int32 clientPort,
            [in] ISSLParametersImpl* sslParameters);

        constructor(
            [in] IInetAddress* address,
            [in] Int32 port,
            [in] IInetAddress* clientAddress,
            [in] Int32 clientPort,
            [in] ISSLParametersImpl* sslParameters);

        constructor(
            [in] ISocket* socket,
            [in] String host,
            [in] Int32 port,
            [in] Boolean autoClose,
            [in] ISSLParametersImpl* sslParameters);

        interface ISSLHandshakeCallbacks;
        interface ISSLParametersImplAliasChooser;
        interface ISSLParametersImplPSKCallbacks;
        interface IOpenSSLSocketImpl;
    }

    [local]
    class COpenSSLSocketImplWrapper {
        constructor(
            [in] ISocket* socket,
            [in] String host,
            [in] Int32 port,
            [in] Boolean autoClose,
            [in] ISSLParametersImpl* sslParameters);

        interface IOpenSSLSocketImplWrapper;
        interface ISSLHandshakeCallbacks;
        interface ISSLParametersImplAliasChooser;
        interface ISSLParametersImplPSKCallbacks;
        interface IOpenSSLSocketImpl;
        interface ISSLSocket;
        interface ISocket;
    }

    class COpenSSLX509CRLEntry {
        constructor(
            [in] Int64 ctx);

        interface IOpenSSLX509CRLEntry;
        interface IX509CRLEntry;
        interface IX509Extension;
    }

    class COpenSSLX509CertPath {
        constructor(
            [in] IList* certificates);

        interface IOpenSSLX509CertPath;
    }

    class COpenSSLX509Certificate {
        constructor(
            [in] Int64 ctx);

        interface IX509Certificate;
        interface IX509Extension;
        interface IOpenSSLX509Certificate;
    }

    class COpenSSLX509CertificateFactory {
        interface IOpenSSLX509CertificateFactory;
        interface ICertificateFactorySpi;
    }

    class CSSLNullSession {
        constructor();

        interface ISSLNullSession;
        interface ISSLSession;
        interface ICloneable;
    }

    [deprecated]
    class CSSLParametersImpl {
        constructor(
            [in] ArrayOf<IKeyManager*>* kms,
            [in] ArrayOf<ITrustManager*>* tms,
            [in] ISecureRandom* sr,
            [in] IClientSessionContext* clientSessionContext,
            [in] IServerSessionContext* serverSessionContext);

        interface ISSLParametersImpl;
        interface ICloneable;
    }

    singleton class CSSLParametersImplHelper {
        interface ISSLParametersImplHelper;
    }

    class CServerSessionContext {
        constructor();

        interface IServerSessionContext;
        interface IAbstractSessionContext;
        interface ISSLSessionContext;
    }

    [deprecated]
    class CX509PublicKey {
        constructor(
            [in] String algorithm,
            [in] ArrayOf<Byte>* encoded);

        interface IPublicKey;
        interface IX509PublicKey;
    }

    class COpenSSLCipherRSARaw {
        constructor();

        interface IOpenSSLCipherRSA;
        interface ICipherSpi;
    }

    class COpenSSLCipherRSAPKCS1 {
        constructor();

        interface IOpenSSLCipherRSA;
        interface ICipherSpi;
    }

    class COpenSSLCipherAESECBNoPadding {
        constructor();

        interface IOpenSSLCipherAESECBNoPadding;
        interface IOpenSSLCipherAES;
        interface IOpenSSLCipher;
        interface ICipherSpi;
    }

    class COpenSSLCipherAESECBPKCS5Padding {
        constructor();

        interface IOpenSSLCipherAES;
        interface IOpenSSLCipher;
        interface ICipherSpi;
    }

    class COpenSSLCipherAESCBCNoPadding {
        constructor();

        interface IOpenSSLCipherAES;
        interface IOpenSSLCipher;
        interface ICipherSpi;
    }

    class COpenSSLCipherAESCBCPKCS5Padding {
        constructor();

        interface IOpenSSLCipherAES;
        interface IOpenSSLCipher;
        interface ICipherSpi;
    }

    class COpenSSLCipherAESCFB {
        constructor();

        interface IOpenSSLCipherAES;
        interface IOpenSSLCipher;
        interface ICipherSpi;
    }

    class COpenSSLCipherAESCTR {
        constructor();

        interface IOpenSSLCipherAES;
        interface IOpenSSLCipher;
        interface ICipherSpi;
    }

    class COpenSSLCipherAESOFB {
        constructor();

        interface IOpenSSLCipherAES;
        interface IOpenSSLCipher;
        interface ICipherSpi;
    }

    class COpenSSLCipherDESEDEECBNoPadding {
        constructor();

        interface IOpenSSLCipher;
        interface ICipherSpi;
    }

    class COpenSSLCipherDESEDEECBPKCS5Padding {
        constructor();

        interface IOpenSSLCipher;
        interface ICipherSpi;
    }

    class COpenSSLCipherDESEDECBCNoPadding {
        constructor();

        interface IOpenSSLCipher;
        interface ICipherSpi;
    }

    class COpenSSLCipherDESEDECBCPKCS5Padding {
        constructor();

        interface IOpenSSLCipher;
        interface ICipherSpi;
    }

    class COpenSSLCipherDESEDECFB {
        constructor();

        interface IOpenSSLCipher;
        interface ICipherSpi;
    }

    class COpenSSLCipherDESEDEOFB {
        constructor();

        interface IOpenSSLCipher;
        interface ICipherSpi;
    }

    class COpenSSLCipherARC4 {
        constructor();

        interface IOpenSSLCipher;
        interface ICipherSpi;
    }

    singleton class COpenSSLX509V3CertificateGeneratorHelper {
        interface IOpenSSLX509V3CertificateGeneratorHelper;
    }

    } // namespace Conscrypt
    } // namespace Org
}
